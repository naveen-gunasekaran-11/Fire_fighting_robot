
eYRC1552.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00001e14  00001ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800202  00800202  00001eaa  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00001eac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  000052a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00005c58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000189c  00000000  00000000  00005cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b9  00000000  00000000  00007594  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ab  00000000  00000000  0000794d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  000082f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  000086b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e90  00000000  00000000  00008b3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 18 03 	jmp	0x630	; 0x630 <__vector_5>
      18:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <A+0x4e>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e4 e1       	ldi	r30, 0x14	; 20
     17e:	fe e1       	ldi	r31, 0x1E	; 30
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a2 30       	cpi	r26, 0x02	; 2
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	a2 e0       	ldi	r26, 0x02	; 2
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a7 32       	cpi	r26, 0x27	; 39
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 09 0b 	call	0x1612	; 0x1612 <main>
     1a4:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_port_config>:
* Example Call:		lcd_port_config();
*
*/
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     1ac:	87 b1       	in	r24, 0x07	; 7
     1ae:	87 6f       	ori	r24, 0xF7	; 247
     1b0:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     1b2:	88 b1       	in	r24, 0x08	; 8
     1b4:	80 78       	andi	r24, 0x80	; 128
     1b6:	88 b9       	out	0x08, r24	; 8
}
     1b8:	08 95       	ret

000001ba <adc_pin_config>:
* Example Call:		adc_pin_config();
*
*/
void adc_pin_config (void)
{
 DDRF = 0x00; 
     1ba:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     1bc:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     1be:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     1c2:	10 92 08 01 	sts	0x0108, r1
}
     1c6:	08 95       	ret

000001c8 <adc_init>:
* Example Call:		adc_init();
*
*/
void adc_init()
{
	ADCSRA = 0x00;
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     1ce:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     1d2:	80 e2       	ldi	r24, 0x20	; 32
     1d4:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     1d8:	80 e8       	ldi	r24, 0x80	; 128
     1da:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     1dc:	86 e8       	ldi	r24, 0x86	; 134
     1de:	80 83       	st	Z, r24
}
     1e0:	08 95       	ret

000001e2 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e2:	86 e6       	ldi	r24, 0x66	; 102
     1e4:	9e e0       	ldi	r25, 0x0E	; 14
     1e6:	01 97       	sbiw	r24, 0x01	; 1
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_set_4bit+0x4>
     1ea:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1ec:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1ee:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1f0:	80 e3       	ldi	r24, 0x30	; 48
     1f2:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1f4:	42 9a       	sbi	0x08, 2	; 8
     1f6:	ef ef       	ldi	r30, 0xFF	; 255
     1f8:	f7 e4       	ldi	r31, 0x47	; 71
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_set_4bit+0x18>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_set_4bit+0x1e>
     200:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     202:	42 98       	cbi	0x08, 2	; 8
     204:	e6 e6       	ldi	r30, 0x66	; 102
     206:	fe e0       	ldi	r31, 0x0E	; 14
     208:	31 97       	sbiw	r30, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_set_4bit+0x26>
     20c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     20e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     210:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     212:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     214:	42 9a       	sbi	0x08, 2	; 8
     216:	ef ef       	ldi	r30, 0xFF	; 255
     218:	f7 e4       	ldi	r31, 0x47	; 71
     21a:	31 97       	sbiw	r30, 0x01	; 1
     21c:	f1 f7       	brne	.-4      	; 0x21a <lcd_set_4bit+0x38>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <lcd_set_4bit+0x3e>
     220:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     222:	42 98       	cbi	0x08, 2	; 8
     224:	e6 e6       	ldi	r30, 0x66	; 102
     226:	fe e0       	ldi	r31, 0x0E	; 14
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_set_4bit+0x46>
     22c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     22e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     230:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     232:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     234:	42 9a       	sbi	0x08, 2	; 8
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	97 e4       	ldi	r25, 0x47	; 71
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_set_4bit+0x58>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_set_4bit+0x5e>
     240:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     242:	42 98       	cbi	0x08, 2	; 8
     244:	e6 e6       	ldi	r30, 0x66	; 102
     246:	fe e0       	ldi	r31, 0x0E	; 14
     248:	31 97       	sbiw	r30, 0x01	; 1
     24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_set_4bit+0x66>
     24c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     24e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     250:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     252:	80 e2       	ldi	r24, 0x20	; 32
     254:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     256:	42 9a       	sbi	0x08, 2	; 8
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	97 e4       	ldi	r25, 0x47	; 71
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_set_4bit+0x7a>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_set_4bit+0x80>
     262:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     264:	42 98       	cbi	0x08, 2	; 8

	
}
     266:	08 95       	ret

00000268 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     268:	98 b1       	in	r25, 0x08	; 8
     26a:	9f 70       	andi	r25, 0x0F	; 15
     26c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     26e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     270:	28 2f       	mov	r18, r24
     272:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     274:	92 2b       	or	r25, r18
     276:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     278:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     27a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     27c:	42 9a       	sbi	0x08, 2	; 8
     27e:	ef ef       	ldi	r30, 0xFF	; 255
     280:	f7 e4       	ldi	r31, 0x47	; 71
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <lcd_wr_command+0x1a>
     286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_wr_command+0x20>
     288:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     28a:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     28c:	98 b1       	in	r25, 0x08	; 8
     28e:	9f 70       	andi	r25, 0x0F	; 15
     290:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     292:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     294:	82 95       	swap	r24
     296:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     298:	89 2b       	or	r24, r25
     29a:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     29c:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     29e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2a0:	42 9a       	sbi	0x08, 2	; 8
     2a2:	8f ef       	ldi	r24, 0xFF	; 255
     2a4:	97 e4       	ldi	r25, 0x47	; 71
     2a6:	01 97       	sbiw	r24, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <lcd_wr_command+0x3e>
     2aa:	00 c0       	rjmp	.+0      	; 0x2ac <lcd_wr_command+0x44>
     2ac:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2ae:	42 98       	cbi	0x08, 2	; 8
}
     2b0:	08 95       	ret

000002b2 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     2b2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_set_4bit>
     2b6:	86 e6       	ldi	r24, 0x66	; 102
     2b8:	9e e0       	ldi	r25, 0x0E	; 14
     2ba:	01 97       	sbiw	r24, 0x01	; 1
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_init+0x8>
     2be:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     2c0:	88 e2       	ldi	r24, 0x28	; 40
     2c2:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_command>
	lcd_wr_command(0x01);
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_command>
	lcd_wr_command(0x06);
     2cc:	86 e0       	ldi	r24, 0x06	; 6
     2ce:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_command>
	lcd_wr_command(0x0E);
     2d2:	8e e0       	ldi	r24, 0x0E	; 14
     2d4:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_command>
	lcd_wr_command(0x80);
     2d8:	80 e8       	ldi	r24, 0x80	; 128
     2da:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_command>
		
}
     2de:	08 95       	ret

000002e0 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2e0:	98 b1       	in	r25, 0x08	; 8
     2e2:	9f 70       	andi	r25, 0x0F	; 15
     2e4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2e6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2e8:	28 2f       	mov	r18, r24
     2ea:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2ec:	92 2b       	or	r25, r18
     2ee:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2f0:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2f2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2f4:	42 9a       	sbi	0x08, 2	; 8
     2f6:	ef ef       	ldi	r30, 0xFF	; 255
     2f8:	f7 e4       	ldi	r31, 0x47	; 71
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_wr_char+0x1a>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <lcd_wr_char+0x20>
     300:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     302:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     304:	98 b1       	in	r25, 0x08	; 8
     306:	9f 70       	andi	r25, 0x0F	; 15
     308:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     30a:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     30c:	82 95       	swap	r24
     30e:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     310:	89 2b       	or	r24, r25
     312:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     314:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     316:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     318:	42 9a       	sbi	0x08, 2	; 8
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	97 e4       	ldi	r25, 0x47	; 71
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <lcd_wr_char+0x3e>
     322:	00 c0       	rjmp	.+0      	; 0x324 <lcd_wr_char+0x44>
     324:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     326:	42 98       	cbi	0x08, 2	; 8
}
     328:	08 95       	ret

0000032a <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     32a:	80 e8       	ldi	r24, 0x80	; 128
     32c:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_command>
}
     330:	08 95       	ret

00000332 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
	while(*str != '\0')
     338:	88 81       	ld	r24, Y
     33a:	88 23       	and	r24, r24
     33c:	31 f0       	breq	.+12     	; 0x34a <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     33e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     340:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     344:	89 91       	ld	r24, Y+
     346:	88 23       	and	r24, r24
     348:	d9 f7       	brne	.-10     	; 0x340 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret

00000350 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     350:	82 30       	cpi	r24, 0x02	; 2
     352:	79 f0       	breq	.+30     	; 0x372 <lcd_cursor+0x22>
     354:	83 30       	cpi	r24, 0x03	; 3
     356:	18 f4       	brcc	.+6      	; 0x35e <lcd_cursor+0xe>
     358:	81 30       	cpi	r24, 0x01	; 1
     35a:	c9 f4       	brne	.+50     	; 0x38e <lcd_cursor+0x3e>
     35c:	05 c0       	rjmp	.+10     	; 0x368 <lcd_cursor+0x18>
     35e:	83 30       	cpi	r24, 0x03	; 3
     360:	69 f0       	breq	.+26     	; 0x37c <lcd_cursor+0x2c>
     362:	84 30       	cpi	r24, 0x04	; 4
     364:	a1 f4       	brne	.+40     	; 0x38e <lcd_cursor+0x3e>
     366:	0f c0       	rjmp	.+30     	; 0x386 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     368:	86 2f       	mov	r24, r22
     36a:	81 58       	subi	r24, 0x81	; 129
     36c:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_command>
     370:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     372:	86 2f       	mov	r24, r22
     374:	81 54       	subi	r24, 0x41	; 65
     376:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_command>
     37a:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     37c:	86 2f       	mov	r24, r22
     37e:	8d 56       	subi	r24, 0x6D	; 109
     380:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_command>
     384:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     386:	86 2f       	mov	r24, r22
     388:	8d 52       	subi	r24, 0x2D	; 45
     38a:	0e 94 34 01 	call	0x268	; 0x268 <lcd_wr_command>
     38e:	08 95       	ret

00000390 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	8a 01       	movw	r16, r20
     39a:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     39c:	88 23       	and	r24, r24
     39e:	11 f0       	breq	.+4      	; 0x3a4 <lcd_print+0x14>
     3a0:	66 23       	and	r22, r22
     3a2:	19 f4       	brne	.+6      	; 0x3aa <lcd_print+0x1a>
	{
		lcd_home();
     3a4:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_home>
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     3aa:	0e 94 a8 01 	call	0x350	; 0x350 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     3ae:	c5 30       	cpi	r28, 0x05	; 5
     3b0:	d1 05       	cpc	r29, r1
     3b2:	71 f4       	brne	.+28     	; 0x3d0 <lcd_print+0x40>
	{
		million=value/10000+48;
     3b4:	c8 01       	movw	r24, r16
     3b6:	60 e1       	ldi	r22, 0x10	; 16
     3b8:	77 e2       	ldi	r23, 0x27	; 39
     3ba:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__udivmodhi4>
     3be:	cb 01       	movw	r24, r22
     3c0:	c0 96       	adiw	r24, 0x30	; 48
     3c2:	90 93 1b 02 	sts	0x021B, r25
     3c6:	80 93 1a 02 	sts	0x021A, r24
		lcd_wr_char(million);
     3ca:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_wr_char>
     3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     3d0:	c4 30       	cpi	r28, 0x04	; 4
     3d2:	d1 05       	cpc	r29, r1
     3d4:	b9 f4       	brne	.+46     	; 0x404 <lcd_print+0x74>
	{
		temp = value/1000;
     3d6:	c8 01       	movw	r24, r16
     3d8:	68 ee       	ldi	r22, 0xE8	; 232
     3da:	73 e0       	ldi	r23, 0x03	; 3
     3dc:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__udivmodhi4>
     3e0:	cb 01       	movw	r24, r22
     3e2:	70 93 1d 02 	sts	0x021D, r23
     3e6:	60 93 1c 02 	sts	0x021C, r22
		thousand = temp%10 + 48;
     3ea:	6a e0       	ldi	r22, 0x0A	; 10
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__udivmodhi4>
     3f2:	c0 96       	adiw	r24, 0x30	; 48
     3f4:	90 93 26 02 	sts	0x0226, r25
     3f8:	80 93 25 02 	sts	0x0225, r24
		lcd_wr_char(thousand);
     3fc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_wr_char>
		flag=1;
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	01 c0       	rjmp	.+2      	; 0x406 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     404:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     406:	c3 30       	cpi	r28, 0x03	; 3
     408:	d1 05       	cpc	r29, r1
     40a:	11 f0       	breq	.+4      	; 0x410 <lcd_print+0x80>
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	b1 f4       	brne	.+44     	; 0x43c <lcd_print+0xac>
	{
		temp = value/100;
     410:	c8 01       	movw	r24, r16
     412:	64 e6       	ldi	r22, 0x64	; 100
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__udivmodhi4>
     41a:	cb 01       	movw	r24, r22
     41c:	70 93 1d 02 	sts	0x021D, r23
     420:	60 93 1c 02 	sts	0x021C, r22
		hundred = temp%10 + 48;
     424:	6a e0       	ldi	r22, 0x0A	; 10
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__udivmodhi4>
     42c:	c0 96       	adiw	r24, 0x30	; 48
     42e:	90 93 22 02 	sts	0x0222, r25
     432:	80 93 21 02 	sts	0x0221, r24
		lcd_wr_char(hundred);
     436:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_wr_char>
		flag=1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     43c:	c2 30       	cpi	r28, 0x02	; 2
     43e:	d1 05       	cpc	r29, r1
     440:	11 f0       	breq	.+4      	; 0x446 <lcd_print+0xb6>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	b1 f4       	brne	.+44     	; 0x472 <lcd_print+0xe2>
	{
		temp = value/10;
     446:	2a e0       	ldi	r18, 0x0A	; 10
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	c8 01       	movw	r24, r16
     44c:	b9 01       	movw	r22, r18
     44e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__udivmodhi4>
     452:	cb 01       	movw	r24, r22
     454:	70 93 1d 02 	sts	0x021D, r23
     458:	60 93 1c 02 	sts	0x021C, r22
		tens = temp%10 + 48;
     45c:	b9 01       	movw	r22, r18
     45e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__udivmodhi4>
     462:	c0 96       	adiw	r24, 0x30	; 48
     464:	90 93 20 02 	sts	0x0220, r25
     468:	80 93 1f 02 	sts	0x021F, r24
		lcd_wr_char(tens);
     46c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_wr_char>
		flag=1;
     470:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     472:	c1 30       	cpi	r28, 0x01	; 1
     474:	d1 05       	cpc	r29, r1
     476:	11 f0       	breq	.+4      	; 0x47c <lcd_print+0xec>
     478:	81 30       	cpi	r24, 0x01	; 1
     47a:	61 f4       	brne	.+24     	; 0x494 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     47c:	c8 01       	movw	r24, r16
     47e:	6a e0       	ldi	r22, 0x0A	; 10
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__udivmodhi4>
     486:	c0 96       	adiw	r24, 0x30	; 48
     488:	90 93 24 02 	sts	0x0224, r25
     48c:	80 93 23 02 	sts	0x0223, r24
		lcd_wr_char(unit);
     490:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_wr_char>
	}
	if(digits>5)
     494:	c6 30       	cpi	r28, 0x06	; 6
     496:	d1 05       	cpc	r29, r1
     498:	1c f0       	brlt	.+6      	; 0x4a0 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     49a:	85 e4       	ldi	r24, 0x45	; 69
     49c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <lcd_wr_char>
	}
	
}
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	08 95       	ret

000004aa <timer1_init>:
* Example Call:		timer1_init();
*
*/
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     4aa:	e1 e8       	ldi	r30, 0x81	; 129
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     4b0:	8c ef       	ldi	r24, 0xFC	; 252
     4b2:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     4bc:	93 e0       	ldi	r25, 0x03	; 3
     4be:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     4c2:	8f ef       	ldi	r24, 0xFF	; 255
     4c4:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     4c8:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     4cc:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     4d0:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     4d4:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     4d8:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     4dc:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     4e0:	8b ea       	ldi	r24, 0xAB	; 171
     4e2:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     4e6:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     4ea:	8c e0       	ldi	r24, 0x0C	; 12
     4ec:	80 83       	st	Z, r24
}
     4ee:	08 95       	ret

000004f0 <servo1_pin_config>:
* Example Call:		servo1_pin_config();
*
*/
void servo1_pin_config (void)
{
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     4f0:	25 9a       	sbi	0x04, 5	; 4
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     4f2:	2d 9a       	sbi	0x05, 5	; 5
}
     4f4:	08 95       	ret

000004f6 <Sharp_GP2D12_estimation>:
				this value is then converted to an integer and then returned.
* Example Call:		sharp9=Sharp_GP2D12_estimation(100);
*
*/
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
	float distance; //Distance measured by the sharp sensor in mm
	unsigned int distanceInt; //Integer value of the distance measured in mm
	//converting ADC value to distance in mm
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     4fa:	68 2f       	mov	r22, r24
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 9e 0c 	call	0x193c	; 0x193c <__floatunsisf>
     506:	2f ee       	ldi	r18, 0xEF	; 239
     508:	39 ec       	ldi	r19, 0xC9	; 201
     50a:	43 e9       	ldi	r20, 0x93	; 147
     50c:	5f e3       	ldi	r21, 0x3F	; 63
     50e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <pow>
     512:	b6 2f       	mov	r27, r22
     514:	a7 2f       	mov	r26, r23
     516:	38 2f       	mov	r19, r24
     518:	29 2f       	mov	r18, r25
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	80 e8       	ldi	r24, 0x80	; 128
     520:	9f e3       	ldi	r25, 0x3F	; 63
     522:	42 2f       	mov	r20, r18
     524:	0b 2f       	mov	r16, r27
     526:	1a 2f       	mov	r17, r26
     528:	23 2f       	mov	r18, r19
     52a:	34 2f       	mov	r19, r20
     52c:	a9 01       	movw	r20, r18
     52e:	98 01       	movw	r18, r16
     530:	0e 94 05 0c 	call	0x180a	; 0x180a <__divsf3>
     534:	2a e9       	ldi	r18, 0x9A	; 154
     536:	39 ef       	ldi	r19, 0xF9	; 249
     538:	4e e2       	ldi	r20, 0x2E	; 46
     53a:	55 e4       	ldi	r21, 0x45	; 69
     53c:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__mulsf3>
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	40 e2       	ldi	r20, 0x20	; 32
     546:	51 e4       	ldi	r21, 0x41	; 65
     548:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__mulsf3>
     54c:	0e 94 6d 0c 	call	0x18da	; 0x18da <__fixsfsi>
     550:	88 27       	eor	r24, r24
     552:	77 fd       	sbrc	r23, 7
     554:	80 95       	com	r24
     556:	98 2f       	mov	r25, r24
     558:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__floatsisf>
	distanceInt = (int)distance;
     55c:	0e 94 6d 0c 	call	0x18da	; 0x18da <__fixsfsi>
	//greater than 800, then it is stored as 800 only
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
     560:	86 2f       	mov	r24, r22
     562:	97 2f       	mov	r25, r23
     564:	23 e0       	ldi	r18, 0x03	; 3
     566:	81 32       	cpi	r24, 0x21	; 33
     568:	92 07       	cpc	r25, r18
     56a:	10 f0       	brcs	.+4      	; 0x570 <Sharp_GP2D12_estimation+0x7a>
     56c:	80 e2       	ldi	r24, 0x20	; 32
     56e:	93 e0       	ldi	r25, 0x03	; 3
}
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	08 95       	ret

00000576 <motion_pin_config>:
* Example Call:		motion_pin_config();
*
*/
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
     576:	81 b1       	in	r24, 0x01	; 1
     578:	8f 60       	ori	r24, 0x0F	; 15
     57a:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     57c:	82 b1       	in	r24, 0x02	; 2
     57e:	80 7f       	andi	r24, 0xF0	; 240
     580:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     582:	ea e0       	ldi	r30, 0x0A	; 10
     584:	f1 e0       	ldi	r31, 0x01	; 1
     586:	80 81       	ld	r24, Z
     588:	88 61       	ori	r24, 0x18	; 24
     58a:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     58c:	eb e0       	ldi	r30, 0x0B	; 11
     58e:	f1 e0       	ldi	r31, 0x01	; 1
     590:	80 81       	ld	r24, Z
     592:	88 61       	ori	r24, 0x18	; 24
     594:	80 83       	st	Z, r24
}
     596:	08 95       	ret

00000598 <left_encoder_pin_config>:
* Example Call:		left_encoder_pin_config();
*
*/
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     598:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     59a:	74 9a       	sbi	0x0e, 4	; 14
}
     59c:	08 95       	ret

0000059e <right_encoder_pin_config>:
* Example Call:		right_encoder_pin_config();
*
*/
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     59e:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     5a0:	75 9a       	sbi	0x0e, 5	; 14
}
     5a2:	08 95       	ret

000005a4 <port_init>:
* Example Call:		port_init();
*
*/
void port_init()
{
	motion_pin_config(); //robot motion pins config
     5a4:	0e 94 bb 02 	call	0x576	; 0x576 <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
     5a8:	0e 94 cc 02 	call	0x598	; 0x598 <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
     5ac:	0e 94 cf 02 	call	0x59e	; 0x59e <right_encoder_pin_config>
	lcd_port_config();
     5b0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_port_config>
	adc_pin_config();
     5b4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <adc_pin_config>
	motion_pin_config();
     5b8:	0e 94 bb 02 	call	0x576	; 0x576 <motion_pin_config>
	servo1_pin_config();
     5bc:	0e 94 78 02 	call	0x4f0	; 0x4f0 <servo1_pin_config>
}
     5c0:	08 95       	ret

000005c2 <left_position_encoder_interrupt_init>:
* Example Call:		left_position_encoder_interrupt_init();
*
*/
void left_position_encoder_interrupt_init (void) 
{
	cli(); //Clears the global interrupt
     5c2:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     5c4:	ea e6       	ldi	r30, 0x6A	; 106
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	80 81       	ld	r24, Z
     5ca:	82 60       	ori	r24, 0x02	; 2
     5cc:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     5ce:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     5d0:	78 94       	sei
}
     5d2:	08 95       	ret

000005d4 <right_position_encoder_interrupt_init>:
* Example Call:		right_position_encoder_interrupt_init();
*
*/
void right_position_encoder_interrupt_init (void) 
{
	cli(); //Clears the global interrupt
     5d4:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     5d6:	ea e6       	ldi	r30, 0x6A	; 106
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	80 81       	ld	r24, Z
     5dc:	88 60       	ori	r24, 0x08	; 8
     5de:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     5e0:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     5e2:	78 94       	sei
}
     5e4:	08 95       	ret

000005e6 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
     5e6:	1f 92       	push	r1
     5e8:	0f 92       	push	r0
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	0f 92       	push	r0
     5ee:	11 24       	eor	r1, r1
     5f0:	8f 93       	push	r24
     5f2:	9f 93       	push	r25
     5f4:	af 93       	push	r26
     5f6:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     5f8:	80 91 02 02 	lds	r24, 0x0202
     5fc:	90 91 03 02 	lds	r25, 0x0203
     600:	a0 91 04 02 	lds	r26, 0x0204
     604:	b0 91 05 02 	lds	r27, 0x0205
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	a1 1d       	adc	r26, r1
     60c:	b1 1d       	adc	r27, r1
     60e:	80 93 02 02 	sts	0x0202, r24
     612:	90 93 03 02 	sts	0x0203, r25
     616:	a0 93 04 02 	sts	0x0204, r26
     61a:	b0 93 05 02 	sts	0x0205, r27
}
     61e:	bf 91       	pop	r27
     620:	af 91       	pop	r26
     622:	9f 91       	pop	r25
     624:	8f 91       	pop	r24
     626:	0f 90       	pop	r0
     628:	0f be       	out	0x3f, r0	; 63
     62a:	0f 90       	pop	r0
     62c:	1f 90       	pop	r1
     62e:	18 95       	reti

00000630 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	0f 92       	push	r0
     638:	11 24       	eor	r1, r1
     63a:	8f 93       	push	r24
     63c:	9f 93       	push	r25
     63e:	af 93       	push	r26
     640:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     642:	80 91 06 02 	lds	r24, 0x0206
     646:	90 91 07 02 	lds	r25, 0x0207
     64a:	a0 91 08 02 	lds	r26, 0x0208
     64e:	b0 91 09 02 	lds	r27, 0x0209
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	a1 1d       	adc	r26, r1
     656:	b1 1d       	adc	r27, r1
     658:	80 93 06 02 	sts	0x0206, r24
     65c:	90 93 07 02 	sts	0x0207, r25
     660:	a0 93 08 02 	sts	0x0208, r26
     664:	b0 93 09 02 	sts	0x0209, r27
}
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti

0000067a <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     67a:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     67c:	90 7f       	andi	r25, 0xF0	; 240
*/
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
     67e:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     680:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
     682:	92 b9       	out	0x02, r25	; 2
}
     684:	08 95       	ret

00000686 <forward>:
* Example Call:		forward();
*
*/
void forward (void)
{
	motion_set(0x06);
     686:	86 e0       	ldi	r24, 0x06	; 6
     688:	0e 94 3d 03 	call	0x67a	; 0x67a <motion_set>
}
     68c:	08 95       	ret

0000068e <left>:
*
*/

void left (void)
{
	motion_set(0x05);
     68e:	85 e0       	ldi	r24, 0x05	; 5
     690:	0e 94 3d 03 	call	0x67a	; 0x67a <motion_set>
}
     694:	08 95       	ret

00000696 <right>:
* Example Call:		right();
*
*/
void right (void)
{
	motion_set(0x0A);
     696:	8a e0       	ldi	r24, 0x0A	; 10
     698:	0e 94 3d 03 	call	0x67a	; 0x67a <motion_set>
}
     69c:	08 95       	ret

0000069e <soft_left>:
* Example Call:		soft_left();
*
*/
void soft_left (void)
{
	motion_set(0x04);
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	0e 94 3d 03 	call	0x67a	; 0x67a <motion_set>
}
     6a4:	08 95       	ret

000006a6 <soft_right>:
* Example Call:		soft_right();
*
*/
void soft_right (void)
{
	motion_set(0x02);
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	0e 94 3d 03 	call	0x67a	; 0x67a <motion_set>
}
     6ac:	08 95       	ret

000006ae <stop>:
*
*/

void stop (void)
{
	motion_set(0x00);
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	0e 94 3d 03 	call	0x67a	; 0x67a <motion_set>
}
     6b4:	08 95       	ret

000006b6 <angle_rotate>:
* Logic: 		the precision encoder is used to count number of pulses and thus rotate the bot by specified angle.
* Example Call:		angle_rotate(90);
*
*/
void angle_rotate(unsigned int Degrees)
{
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     6bc:	bc 01       	movw	r22, r24
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 9e 0c 	call	0x193c	; 0x193c <__floatunsisf>
     6c6:	28 e4       	ldi	r18, 0x48	; 72
     6c8:	31 ee       	ldi	r19, 0xE1	; 225
     6ca:	42 e8       	ldi	r20, 0x82	; 130
     6cc:	50 e4       	ldi	r21, 0x40	; 64
     6ce:	0e 94 05 0c 	call	0x180a	; 0x180a <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     6d2:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	a0 e0       	ldi	r26, 0x00	; 0
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     6de:	10 92 02 02 	sts	0x0202, r1
     6e2:	10 92 03 02 	sts	0x0203, r1
     6e6:	10 92 04 02 	sts	0x0204, r1
     6ea:	10 92 05 02 	sts	0x0205, r1
	ShaftCountLeft = 0;
     6ee:	10 92 06 02 	sts	0x0206, r1
     6f2:	10 92 07 02 	sts	0x0207, r1
     6f6:	10 92 08 02 	sts	0x0208, r1
     6fa:	10 92 09 02 	sts	0x0209, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     6fe:	f1 e0       	ldi	r31, 0x01	; 1
     700:	c0 e0       	ldi	r28, 0x00	; 0
     702:	40 91 02 02 	lds	r20, 0x0202
     706:	50 91 03 02 	lds	r21, 0x0203
     70a:	60 91 04 02 	lds	r22, 0x0204
     70e:	70 91 05 02 	lds	r23, 0x0205
     712:	00 91 06 02 	lds	r16, 0x0206
     716:	10 91 07 02 	lds	r17, 0x0207
     71a:	20 91 08 02 	lds	r18, 0x0208
     71e:	30 91 09 02 	lds	r19, 0x0209
     722:	ef 2f       	mov	r30, r31
     724:	48 17       	cp	r20, r24
     726:	59 07       	cpc	r21, r25
     728:	6a 07       	cpc	r22, r26
     72a:	7b 07       	cpc	r23, r27
     72c:	08 f4       	brcc	.+2      	; 0x730 <angle_rotate+0x7a>
     72e:	ec 2f       	mov	r30, r28
     730:	ee 23       	and	r30, r30
     732:	49 f4       	brne	.+18     	; 0x746 <angle_rotate+0x90>
     734:	4f 2f       	mov	r20, r31
     736:	08 17       	cp	r16, r24
     738:	19 07       	cpc	r17, r25
     73a:	2a 07       	cpc	r18, r26
     73c:	3b 07       	cpc	r19, r27
     73e:	08 f4       	brcc	.+2      	; 0x742 <angle_rotate+0x8c>
     740:	4c 2f       	mov	r20, r28
     742:	44 23       	and	r20, r20
     744:	f1 f2       	breq	.-68     	; 0x702 <angle_rotate+0x4c>
		break;
	}
	stop(); //Stop robot
     746:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
}
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	08 95       	ret

00000752 <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     752:	bc 01       	movw	r22, r24
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 9e 0c 	call	0x193c	; 0x193c <__floatunsisf>
     75c:	25 ee       	ldi	r18, 0xE5	; 229
     75e:	30 ed       	ldi	r19, 0xD0	; 208
     760:	4a ea       	ldi	r20, 0xAA	; 170
     762:	50 e4       	ldi	r21, 0x40	; 64
     764:	0e 94 05 0c 	call	0x180a	; 0x180a <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     768:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fixunssfsi>
     76c:	46 2f       	mov	r20, r22
     76e:	57 2f       	mov	r21, r23
     770:	68 2f       	mov	r22, r24
     772:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
     774:	10 92 02 02 	sts	0x0202, r1
     778:	10 92 03 02 	sts	0x0203, r1
     77c:	10 92 04 02 	sts	0x0204, r1
     780:	10 92 05 02 	sts	0x0205, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     784:	80 91 02 02 	lds	r24, 0x0202
     788:	90 91 03 02 	lds	r25, 0x0203
     78c:	a0 91 04 02 	lds	r26, 0x0204
     790:	b0 91 05 02 	lds	r27, 0x0205
     794:	48 17       	cp	r20, r24
     796:	59 07       	cpc	r21, r25
     798:	6a 07       	cpc	r22, r26
     79a:	7b 07       	cpc	r23, r27
     79c:	98 f7       	brcc	.-26     	; 0x784 <linear_distance_mm+0x32>
		{
			break;
		}
	}
	stop(); //Stop robot
     79e:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
}
     7a2:	08 95       	ret

000007a4 <forward_mm>:
* Logic: 		call function linear_distance_mm(int);
* Example Call:		forward_mm(100);
*
*/
void forward_mm(unsigned int DistanceInMM)
{
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
	forward();
     7aa:	0e 94 43 03 	call	0x686	; 0x686 <forward>
	linear_distance_mm(DistanceInMM);
     7ae:	ce 01       	movw	r24, r28
     7b0:	0e 94 a9 03 	call	0x752	; 0x752 <linear_distance_mm>
}
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <left_degrees>:
* Example Call:		left_degrees(90);
*
*/

void left_degrees(unsigned int Degrees)
{
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     7c0:	0e 94 47 03 	call	0x68e	; 0x68e <left>
	angle_rotate(Degrees);
     7c4:	ce 01       	movw	r24, r28
     7c6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <angle_rotate>
}
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	08 95       	ret

000007d0 <right_degrees>:
* Example Call:		right_degrees(90);
*
*/

void right_degrees(unsigned int Degrees)
{
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     7d6:	0e 94 4b 03 	call	0x696	; 0x696 <right>
	angle_rotate(Degrees);
     7da:	ce 01       	movw	r24, r28
     7dc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <angle_rotate>
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <soft_left_degrees>:
* Example Call:		soft_left_degrees(90);
*
*/

void soft_left_degrees(unsigned int Degrees)
{
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
     7ec:	0e 94 4f 03 	call	0x69e	; 0x69e <soft_left>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     7f0:	ce 01       	movw	r24, r28
     7f2:	88 0f       	add	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <angle_rotate>
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <soft_right_degrees>:
* Logic: 		call function angle rotate(int);
* Example Call:		soft_right_degrees(90);
*
*/
void soft_right_degrees(unsigned int Degrees)
{
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
     806:	0e 94 53 03 	call	0x6a6	; 0x6a6 <soft_right>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     80a:	ce 01       	movw	r24, r28
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <angle_rotate>
}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	08 95       	ret

0000081a <servo_1>:

void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
     81a:	10 92 89 00 	sts	0x0089, r1
*/

void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     81e:	68 2f       	mov	r22, r24
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 9e 0c 	call	0x193c	; 0x193c <__floatunsisf>
     82a:	2b e7       	ldi	r18, 0x7B	; 123
     82c:	34 e1       	ldi	r19, 0x14	; 20
     82e:	4e ee       	ldi	r20, 0xEE	; 238
     830:	5f e3       	ldi	r21, 0x3F	; 63
     832:	0e 94 05 0c 	call	0x180a	; 0x180a <__divsf3>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	4c e0       	ldi	r20, 0x0C	; 12
     83c:	52 e4       	ldi	r21, 0x42	; 66
     83e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__addsf3>
	OCR1AH = 0x00;
	OCR1AL = (unsigned char) PositionPanServo;
     842:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fixunssfsi>
     846:	60 93 88 00 	sts	0x0088, r22
}
     84a:	08 95       	ret

0000084c <init_devices_1>:
* Example Call:		init_devices_1();
*
*/
void init_devices_1()
{
	cli(); //Clears the global interrupt
     84c:	f8 94       	cli
	port_init();  //Initializes all the ports
     84e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <port_init>
	left_position_encoder_interrupt_init();
     852:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
     856:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <right_position_encoder_interrupt_init>
	sei();   // Enables the global interrupt
     85a:	78 94       	sei
	
}
     85c:	08 95       	ret

0000085e <timer5_init>:
*
*/

void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     85e:	e1 e2       	ldi	r30, 0x21	; 33
     860:	f1 e0       	ldi	r31, 0x01	; 1
     862:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     870:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     874:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     878:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     87c:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     880:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     884:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     888:	89 ea       	ldi	r24, 0xA9	; 169
     88a:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     88e:	8b e0       	ldi	r24, 0x0B	; 11
     890:	80 83       	st	Z, r24
}
     892:	08 95       	ret

00000894 <init_devices_2>:
* Example Call:		init_devices_2();
*
*/
void init_devices_2()
{
	cli(); //Clears the global interrupts
     894:	f8 94       	cli
	port_init();
     896:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <port_init>
	adc_init();
     89a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <adc_init>
	timer5_init();
     89e:	0e 94 2f 04 	call	0x85e	; 0x85e <timer5_init>
	timer1_init();
     8a2:	0e 94 55 02 	call	0x4aa	; 0x4aa <timer1_init>
	sei();   //Enables the global interrupts
     8a6:	78 94       	sei
}
     8a8:	08 95       	ret

000008aa <ADC_Conversion>:
*
*/
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
     8aa:	88 30       	cpi	r24, 0x08	; 8
     8ac:	18 f0       	brcs	.+6      	; 0x8b4 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     8ae:	98 e0       	ldi	r25, 0x08	; 8
     8b0:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
     8b4:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
     8b6:	80 62       	ori	r24, 0x20	; 32
     8b8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     8bc:	ea e7       	ldi	r30, 0x7A	; 122
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z
     8c2:	80 64       	ori	r24, 0x40	; 64
     8c4:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     8c6:	80 81       	ld	r24, Z
     8c8:	84 ff       	sbrs	r24, 4
     8ca:	fd cf       	rjmp	.-6      	; 0x8c6 <ADC_Conversion+0x1c>
	a=ADCH;
     8cc:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     8d0:	ea e7       	ldi	r30, 0x7A	; 122
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	90 81       	ld	r25, Z
     8d6:	90 61       	ori	r25, 0x10	; 16
     8d8:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     8da:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     8de:	08 95       	ret

000008e0 <print_sensor>:
* Logic: 		it first gets the ADC value and then calls function lcd_print(), which prints the value. lcd_print() is present in lcd.h
* Example Call:		print_sensor(1,1,3)
*
*/
void print_sensor(char row, char coloumn,unsigned char channel)
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	d8 2f       	mov	r29, r24
     8e6:	c6 2f       	mov	r28, r22
     8e8:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     8ea:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     8ee:	48 2f       	mov	r20, r24
     8f0:	80 93 1e 02 	sts	0x021E, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     8f4:	8d 2f       	mov	r24, r29
     8f6:	6c 2f       	mov	r22, r28
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	23 e0       	ldi	r18, 0x03	; 3
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_print>
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <velocity>:
* Example Call:		velocity(100,100);
*
*/
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     908:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     90c:	60 93 2a 01 	sts	0x012A, r22
}
     910:	08 95       	ret

00000912 <A>:
*
*/

void A (void)
{
	while(Left_white_line<0x10&&Center_white_line<0x10&&Right_white_line<0x10)//move forward till black line is detected
     912:	80 91 0c 02 	lds	r24, 0x020C
     916:	80 31       	cpi	r24, 0x10	; 16
     918:	48 f5       	brcc	.+82     	; 0x96c <A+0x5a>
     91a:	80 91 0b 02 	lds	r24, 0x020B
     91e:	80 31       	cpi	r24, 0x10	; 16
     920:	28 f5       	brcc	.+74     	; 0x96c <A+0x5a>
     922:	80 91 0a 02 	lds	r24, 0x020A
     926:	80 31       	cpi	r24, 0x10	; 16
     928:	08 f5       	brcc	.+66     	; 0x96c <A+0x5a>
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     92a:	83 e0       	ldi	r24, 0x03	; 3
     92c:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     930:	80 93 0c 02 	sts	0x020C, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     93a:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     944:	80 93 0a 02 	sts	0x020A, r24
	
		forward();
     948:	0e 94 43 03 	call	0x686	; 0x686 <forward>
		velocity(150,150);
     94c:	86 e9       	ldi	r24, 0x96	; 150
     94e:	66 e9       	ldi	r22, 0x96	; 150
     950:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
*
*/

void A (void)
{
	while(Left_white_line<0x10&&Center_white_line<0x10&&Right_white_line<0x10)//move forward till black line is detected
     954:	80 91 0c 02 	lds	r24, 0x020C
     958:	80 31       	cpi	r24, 0x10	; 16
     95a:	40 f4       	brcc	.+16     	; 0x96c <A+0x5a>
     95c:	80 91 0b 02 	lds	r24, 0x020B
     960:	80 31       	cpi	r24, 0x10	; 16
     962:	20 f4       	brcc	.+8      	; 0x96c <A+0x5a>
     964:	80 91 0a 02 	lds	r24, 0x020A
     968:	80 31       	cpi	r24, 0x10	; 16
     96a:	f8 f2       	brcs	.-66     	; 0x92a <A+0x18>
		velocity(150,150);
	}	
	while(1)//motion of bot inside the room till fire is detected or end of room is reached
	{
		
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     972:	80 93 0c 02 	sts	0x020C, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     97c:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     986:	80 93 0a 02 	sts	0x020A, r24
		sharp11=ADC_Conversion(11);	//Getting data of Sharp Sensor 3
     98a:	8b e0       	ldi	r24, 0x0B	; 11
     98c:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp11=Sharp_GP2D12_estimation(sharp11);	//Getting data of Sharp Sensor 3
     990:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
     994:	90 93 10 02 	sts	0x0210, r25
     998:	80 93 0f 02 	sts	0x020F, r24
		
		LED=ADC_Conversion(7);	//Getting data of externally interfaced White Line Sensor
     99c:	87 e0       	ldi	r24, 0x07	; 7
     99e:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     9a2:	80 93 00 02 	sts	0x0200, r24
     9a6:	10 92 01 02 	sts	0x0201, r1
		
		flag=0;
     9aa:	10 92 15 02 	sts	0x0215, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	43 e0       	ldi	r20, 0x03	; 3
     9b4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	65 e0       	ldi	r22, 0x05	; 5
     9bc:	42 e0       	ldi	r20, 0x02	; 2
     9be:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	69 e0       	ldi	r22, 0x09	; 9
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		
		
		

		if(Center_white_line>0x10)//Center WL is black, move forward
     9cc:	80 91 0b 02 	lds	r24, 0x020B
     9d0:	81 31       	cpi	r24, 0x11	; 17
     9d2:	48 f0       	brcs	.+18     	; 0x9e6 <A+0xd4>
		{
			flag=1;
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	80 93 15 02 	sts	0x0215, r24
			forward();
     9da:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(150,150);
     9de:	86 e9       	ldi	r24, 0x96	; 150
     9e0:	66 e9       	ldi	r22, 0x96	; 150
     9e2:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Left_white_line<0x10) && (flag==0))//Left WL sensor is white and center is not black. move right
     9e6:	80 91 0c 02 	lds	r24, 0x020C
     9ea:	80 31       	cpi	r24, 0x10	; 16
     9ec:	68 f4       	brcc	.+26     	; 0xa08 <A+0xf6>
     9ee:	80 91 15 02 	lds	r24, 0x0215
     9f2:	88 23       	and	r24, r24
     9f4:	49 f4       	brne	.+18     	; 0xa08 <A+0xf6>
		{
			flag=1;
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	80 93 15 02 	sts	0x0215, r24
			forward();
     9fc:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(130,50);
     a00:	82 e8       	ldi	r24, 0x82	; 130
     a02:	62 e3       	ldi	r22, 0x32	; 50
     a04:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Right_white_line<0x10) && (flag==0))//Right WL sensor is white and center is not black. move left
     a08:	80 91 0a 02 	lds	r24, 0x020A
     a0c:	80 31       	cpi	r24, 0x10	; 16
     a0e:	68 f4       	brcc	.+26     	; 0xa2a <A+0x118>
     a10:	80 91 15 02 	lds	r24, 0x0215
     a14:	88 23       	and	r24, r24
     a16:	49 f4       	brne	.+18     	; 0xa2a <A+0x118>
		{
			flag=1;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	80 93 15 02 	sts	0x0215, r24
			forward();
     a1e:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(50,130);
     a22:	82 e3       	ldi	r24, 0x32	; 50
     a24:	62 e8       	ldi	r22, 0x82	; 130
     a26:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		
		if(Center_white_line<0x10 && Left_white_line<0x10 && Right_white_line<0x10)//if all WL sensors are white, turn right. This is to turn the bot at the corners.
     a2a:	80 91 0b 02 	lds	r24, 0x020B
     a2e:	80 31       	cpi	r24, 0x10	; 16
     a30:	70 f4       	brcc	.+28     	; 0xa4e <A+0x13c>
     a32:	80 91 0c 02 	lds	r24, 0x020C
     a36:	80 31       	cpi	r24, 0x10	; 16
     a38:	50 f4       	brcc	.+20     	; 0xa4e <A+0x13c>
     a3a:	80 91 0a 02 	lds	r24, 0x020A
     a3e:	80 31       	cpi	r24, 0x10	; 16
     a40:	30 f4       	brcc	.+12     	; 0xa4e <A+0x13c>
		{
			forward();
     a42:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			
			velocity(130,50);
     a46:	82 e8       	ldi	r24, 0x82	; 130
     a48:	62 e3       	ldi	r22, 0x32	; 50
     a4a:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		
		if (LED<0x10 && sharp11<275)//Condition for detection of fire
     a4e:	80 91 00 02 	lds	r24, 0x0200
     a52:	90 91 01 02 	lds	r25, 0x0201
     a56:	80 31       	cpi	r24, 0x10	; 16
     a58:	91 05       	cpc	r25, r1
     a5a:	0c f0       	brlt	.+2      	; 0xa5e <A+0x14c>
     a5c:	6a c0       	rjmp	.+212    	; 0xb32 <A+0x220>
     a5e:	80 91 0f 02 	lds	r24, 0x020F
     a62:	90 91 10 02 	lds	r25, 0x0210
     a66:	21 e0       	ldi	r18, 0x01	; 1
     a68:	83 31       	cpi	r24, 0x13	; 19
     a6a:	92 07       	cpc	r25, r18
     a6c:	08 f0       	brcs	.+2      	; 0xa70 <A+0x15e>
     a6e:	61 c0       	rjmp	.+194    	; 0xb32 <A+0x220>
		{
		
			stop();
     a70:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	9f eb       	ldi	r25, 0xBF	; 191
     a78:	a1 e2       	ldi	r26, 0x21	; 33
     a7a:	81 50       	subi	r24, 0x01	; 1
     a7c:	90 40       	sbci	r25, 0x00	; 0
     a7e:	a0 40       	sbci	r26, 0x00	; 0
     a80:	e1 f7       	brne	.-8      	; 0xa7a <A+0x168>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <A+0x172>
     a84:	00 00       	nop
			_delay_ms(750);
			angle+=45;	//increase angle by which the servo should rotate by 45 degrees
     a86:	80 91 16 02 	lds	r24, 0x0216
     a8a:	90 91 17 02 	lds	r25, 0x0217
     a8e:	8d 96       	adiw	r24, 0x2d	; 45
     a90:	90 93 17 02 	sts	0x0217, r25
     a94:	80 93 16 02 	sts	0x0216, r24
			stop();
     a98:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
			//buzzer(1000);//sound buzzer for 1 second
			DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     a9c:	3b 9a       	sbi	0x07, 3	; 7
			PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     a9e:	43 98       	cbi	0x08, 3	; 8
			unsigned char port_restore = 0;
			port_restore = PINC;
     aa0:	86 b1       	in	r24, 0x06	; 6
			port_restore = port_restore | 0x08;
     aa2:	88 60       	ori	r24, 0x08	; 8
			PORTC = port_restore;
     aa4:	88 b9       	out	0x08, r24	; 8
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
     aaa:	ac e2       	ldi	r26, 0x2C	; 44
     aac:	81 50       	subi	r24, 0x01	; 1
     aae:	90 40       	sbci	r25, 0x00	; 0
     ab0:	a0 40       	sbci	r26, 0x00	; 0
     ab2:	e1 f7       	brne	.-8      	; 0xaac <A+0x19a>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <A+0x1a4>
     ab6:	00 00       	nop
			_delay_ms(1000);		//delay
			//switch off buzzer
			port_restore = PINC;
     ab8:	86 b1       	in	r24, 0x06	; 6
			port_restore = port_restore & 0xF7;
     aba:	87 7f       	andi	r24, 0xF7	; 247
			PORTC = port_restore;
     abc:	88 b9       	out	0x08, r24	; 8
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	9f ef       	ldi	r25, 0xFF	; 255
     ac2:	ac e2       	ldi	r26, 0x2C	; 44
     ac4:	81 50       	subi	r24, 0x01	; 1
     ac6:	90 40       	sbci	r25, 0x00	; 0
     ac8:	a0 40       	sbci	r26, 0x00	; 0
     aca:	e1 f7       	brne	.-8      	; 0xac4 <A+0x1b2>
     acc:	00 c0       	rjmp	.+0      	; 0xace <A+0x1bc>
     ace:	00 00       	nop
			_delay_ms(1000);		//delay
				
			servo_1(angle);//rotate servo to drop magnet and put out fire
     ad0:	80 91 16 02 	lds	r24, 0x0216
     ad4:	0e 94 0d 04 	call	0x81a	; 0x81a <servo_1>
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	9f ef       	ldi	r25, 0xFF	; 255
     adc:	ac e2       	ldi	r26, 0x2C	; 44
     ade:	81 50       	subi	r24, 0x01	; 1
     ae0:	90 40       	sbci	r25, 0x00	; 0
     ae2:	a0 40       	sbci	r26, 0x00	; 0
     ae4:	e1 f7       	brne	.-8      	; 0xade <A+0x1cc>
     ae6:	00 c0       	rjmp	.+0      	; 0xae8 <A+0x1d6>
     ae8:	00 00       	nop
			_delay_ms(1000);
			stop();
     aea:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
     aee:	8f ef       	ldi	r24, 0xFF	; 255
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	ac e2       	ldi	r26, 0x2C	; 44
     af4:	81 50       	subi	r24, 0x01	; 1
     af6:	90 40       	sbci	r25, 0x00	; 0
     af8:	a0 40       	sbci	r26, 0x00	; 0
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <A+0x1e2>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <A+0x1ec>
     afe:	00 00       	nop
			_delay_ms(1000);
			left_degrees(180);//take 180 degree turn
     b00:	84 eb       	ldi	r24, 0xB4	; 180
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 dd 03 	call	0x7ba	; 0x7ba <left_degrees>
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	9f ef       	ldi	r25, 0xFF	; 255
     b0c:	ac e2       	ldi	r26, 0x2C	; 44
     b0e:	81 50       	subi	r24, 0x01	; 1
     b10:	90 40       	sbci	r25, 0x00	; 0
     b12:	a0 40       	sbci	r26, 0x00	; 0
     b14:	e1 f7       	brne	.-8      	; 0xb0e <A+0x1fc>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <A+0x206>
     b18:	00 00       	nop
			_delay_ms(1000);	
			stop();
     b1a:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	9f ef       	ldi	r25, 0xFF	; 255
     b22:	ac e2       	ldi	r26, 0x2C	; 44
     b24:	81 50       	subi	r24, 0x01	; 1
     b26:	90 40       	sbci	r25, 0x00	; 0
     b28:	a0 40       	sbci	r26, 0x00	; 0
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <A+0x212>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <A+0x21c>
     b2e:	00 00       	nop
     b30:	20 c0       	rjmp	.+64     	; 0xb72 <A+0x260>
			_delay_ms(1000);
			break;//get out of the while loop
		}
		if(sharp11<100)//Condition for no fire LED present in the room
     b32:	80 91 0f 02 	lds	r24, 0x020F
     b36:	90 91 10 02 	lds	r25, 0x0210
     b3a:	84 36       	cpi	r24, 0x64	; 100
     b3c:	91 05       	cpc	r25, r1
     b3e:	08 f0       	brcs	.+2      	; 0xb42 <A+0x230>
     b40:	15 cf       	rjmp	.-470    	; 0x96c <A+0x5a>
		{
			stop();
     b42:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	9f ef       	ldi	r25, 0xFF	; 255
     b4a:	ac e2       	ldi	r26, 0x2C	; 44
     b4c:	81 50       	subi	r24, 0x01	; 1
     b4e:	90 40       	sbci	r25, 0x00	; 0
     b50:	a0 40       	sbci	r26, 0x00	; 0
     b52:	e1 f7       	brne	.-8      	; 0xb4c <A+0x23a>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <A+0x244>
     b56:	00 00       	nop
			_delay_ms(1000);
			left_degrees(180);	//rotate bot by 180 degrees
     b58:	84 eb       	ldi	r24, 0xB4	; 180
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <left_degrees>
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	9f eb       	ldi	r25, 0xBF	; 191
     b64:	a1 e2       	ldi	r26, 0x21	; 33
     b66:	81 50       	subi	r24, 0x01	; 1
     b68:	90 40       	sbci	r25, 0x00	; 0
     b6a:	a0 40       	sbci	r26, 0x00	; 0
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <A+0x254>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <A+0x25e>
     b70:	00 00       	nop
			break;
		}			
			
	
	}
	fl=0;//reset flag
     b72:	10 92 14 02 	sts	0x0214, r1
	while(1)
	{
		
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     b76:	83 e0       	ldi	r24, 0x03	; 3
     b78:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     b7c:	80 93 0c 02 	sts	0x020C, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     b86:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     b90:	80 93 0a 02 	sts	0x020A, r24
		sharp11=ADC_Conversion(11);	//Getting data of Sharp Sensor 3
     b94:	8b e0       	ldi	r24, 0x0B	; 11
     b96:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp11=Sharp_GP2D12_estimation(sharp11);	//Getting data of Sharp Sensor 3
     b9a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
     b9e:	90 93 10 02 	sts	0x0210, r25
     ba2:	80 93 0f 02 	sts	0x020F, r24
		sharp9=ADC_Conversion(9);	//Getting data of Sharp Sensor 1
     ba6:	89 e0       	ldi	r24, 0x09	; 9
     ba8:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp9=Sharp_GP2D12_estimation(sharp9);	//Getting data of Sharp Sensor 1
     bac:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
     bb0:	90 93 12 02 	sts	0x0212, r25
     bb4:	80 93 11 02 	sts	0x0211, r24

		flag=0;
     bb8:	10 92 15 02 	sts	0x0215, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	43 e0       	ldi	r20, 0x03	; 3
     bc2:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	65 e0       	ldi	r22, 0x05	; 5
     bca:	42 e0       	ldi	r20, 0x02	; 2
     bcc:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	69 e0       	ldi	r22, 0x09	; 9
     bd4:	41 e0       	ldi	r20, 0x01	; 1
     bd6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		
		if(Center_white_line>0x10)	//Center WL sensor black ,move forward
     bda:	80 91 0b 02 	lds	r24, 0x020B
     bde:	81 31       	cpi	r24, 0x11	; 17
     be0:	48 f0       	brcs	.+18     	; 0xbf4 <A+0x2e2>
		{
			flag=1;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	80 93 15 02 	sts	0x0215, r24
			forward();
     be8:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(150,150);
     bec:	86 e9       	ldi	r24, 0x96	; 150
     bee:	66 e9       	ldi	r22, 0x96	; 150
     bf0:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Left_white_line<0x10) && (flag==0))	//Left WL sensor is white and center is not black. move right
     bf4:	80 91 0c 02 	lds	r24, 0x020C
     bf8:	80 31       	cpi	r24, 0x10	; 16
     bfa:	68 f4       	brcc	.+26     	; 0xc16 <A+0x304>
     bfc:	80 91 15 02 	lds	r24, 0x0215
     c00:	88 23       	and	r24, r24
     c02:	49 f4       	brne	.+18     	; 0xc16 <A+0x304>
		{
			flag=1;
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 15 02 	sts	0x0215, r24
			forward();
     c0a:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(130,50);
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	62 e3       	ldi	r22, 0x32	; 50
     c12:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Right_white_line<0x10) && (flag==0))	//Right WL sensor is white and center is not black. move left
     c16:	80 91 0a 02 	lds	r24, 0x020A
     c1a:	80 31       	cpi	r24, 0x10	; 16
     c1c:	68 f4       	brcc	.+26     	; 0xc38 <A+0x326>
     c1e:	80 91 15 02 	lds	r24, 0x0215
     c22:	88 23       	and	r24, r24
     c24:	49 f4       	brne	.+18     	; 0xc38 <A+0x326>
		{
			flag=1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	80 93 15 02 	sts	0x0215, r24
			forward();
     c2c:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(50,130);
     c30:	82 e3       	ldi	r24, 0x32	; 50
     c32:	62 e8       	ldi	r22, 0x82	; 130
     c34:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if(Center_white_line<0x10 && Left_white_line<0x10 && Right_white_line<0x10)	//if all WL sensors are white, turn left. This is to turn the bot at the corners.
     c38:	80 91 0b 02 	lds	r24, 0x020B
     c3c:	80 31       	cpi	r24, 0x10	; 16
     c3e:	88 f4       	brcc	.+34     	; 0xc62 <A+0x350>
     c40:	80 91 0c 02 	lds	r24, 0x020C
     c44:	80 31       	cpi	r24, 0x10	; 16
     c46:	68 f4       	brcc	.+26     	; 0xc62 <A+0x350>
     c48:	80 91 0a 02 	lds	r24, 0x020A
     c4c:	80 31       	cpi	r24, 0x10	; 16
     c4e:	48 f4       	brcc	.+18     	; 0xc62 <A+0x350>
		{
			forward();
     c50:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			fl=1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 14 02 	sts	0x0214, r24
			velocity(50,130);
     c5a:	82 e3       	ldi	r24, 0x32	; 50
     c5c:	62 e8       	ldi	r22, 0x82	; 130
     c5e:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		if(sharp9>650)	//condition if the bot detects that the door is present when it is at a corner and about to turn. Sharp sensor 1 will be greater than 650mm
     c62:	80 91 11 02 	lds	r24, 0x0211
     c66:	90 91 12 02 	lds	r25, 0x0212
     c6a:	a2 e0       	ldi	r26, 0x02	; 2
     c6c:	8b 38       	cpi	r24, 0x8B	; 139
     c6e:	9a 07       	cpc	r25, r26
     c70:	18 f0       	brcs	.+6      	; 0xc78 <A+0x366>
			fl=1;	//flag fl is set
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 14 02 	sts	0x0214, r24
		if(Center_white_line>0x10 && sharp11>650 && fl==1)	//condition that the Center WL sensor is black and Sharp Sensor 3 detects a door
     c78:	80 91 0b 02 	lds	r24, 0x020B
     c7c:	81 31       	cpi	r24, 0x11	; 17
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <A+0x370>
     c80:	7a cf       	rjmp	.-268    	; 0xb76 <A+0x264>
     c82:	80 91 0f 02 	lds	r24, 0x020F
     c86:	90 91 10 02 	lds	r25, 0x0210
     c8a:	b2 e0       	ldi	r27, 0x02	; 2
     c8c:	8b 38       	cpi	r24, 0x8B	; 139
     c8e:	9b 07       	cpc	r25, r27
     c90:	08 f4       	brcc	.+2      	; 0xc94 <A+0x382>
     c92:	71 cf       	rjmp	.-286    	; 0xb76 <A+0x264>
     c94:	80 91 14 02 	lds	r24, 0x0214
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	09 f0       	breq	.+2      	; 0xc9e <A+0x38c>
     c9c:	6c cf       	rjmp	.-296    	; 0xb76 <A+0x264>
		}
	}
	while(1)	//similar to previous loop except that here if all 3 WL sensors detect white, the bot moves forward
	{
		
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     ca4:	80 93 0c 02 	sts	0x020C, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     cae:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     cb8:	80 93 0a 02 	sts	0x020A, r24
		sharp11=ADC_Conversion(11);	//Getting data of Sharp Sensor 3
     cbc:	8b e0       	ldi	r24, 0x0B	; 11
     cbe:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp11=Sharp_GP2D12_estimation(sharp11);	//Getting data of Sharp Sensor 3
     cc2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
     cc6:	90 93 10 02 	sts	0x0210, r25
     cca:	80 93 0f 02 	sts	0x020F, r24
	

		flag=0;
     cce:	10 92 15 02 	sts	0x0215, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	43 e0       	ldi	r20, 0x03	; 3
     cd8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	65 e0       	ldi	r22, 0x05	; 5
     ce0:	42 e0       	ldi	r20, 0x02	; 2
     ce2:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	69 e0       	ldi	r22, 0x09	; 9
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		
		if(Center_white_line>0x10)	//Center WL sensor black ,move forward
     cf0:	80 91 0b 02 	lds	r24, 0x020B
     cf4:	81 31       	cpi	r24, 0x11	; 17
     cf6:	48 f0       	brcs	.+18     	; 0xd0a <A+0x3f8>
		{
			flag=1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 15 02 	sts	0x0215, r24
			forward();
     cfe:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(150,150);
     d02:	86 e9       	ldi	r24, 0x96	; 150
     d04:	66 e9       	ldi	r22, 0x96	; 150
     d06:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Left_white_line<0x10) && (flag==0))	//Left WL sensor is white and center is not black. move right
     d0a:	80 91 0c 02 	lds	r24, 0x020C
     d0e:	80 31       	cpi	r24, 0x10	; 16
     d10:	68 f4       	brcc	.+26     	; 0xd2c <A+0x41a>
     d12:	80 91 15 02 	lds	r24, 0x0215
     d16:	88 23       	and	r24, r24
     d18:	49 f4       	brne	.+18     	; 0xd2c <A+0x41a>
		{
			flag=1;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	80 93 15 02 	sts	0x0215, r24
			forward();
     d20:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(130,50);
     d24:	82 e8       	ldi	r24, 0x82	; 130
     d26:	62 e3       	ldi	r22, 0x32	; 50
     d28:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Right_white_line<0x10) && (flag==0))	//Right WL sensor is white and center is not black. move left
     d2c:	80 91 0a 02 	lds	r24, 0x020A
     d30:	80 31       	cpi	r24, 0x10	; 16
     d32:	68 f4       	brcc	.+26     	; 0xd4e <A+0x43c>
     d34:	80 91 15 02 	lds	r24, 0x0215
     d38:	88 23       	and	r24, r24
     d3a:	49 f4       	brne	.+18     	; 0xd4e <A+0x43c>
		{
			flag=1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	80 93 15 02 	sts	0x0215, r24
			forward();
     d42:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(50,130);
     d46:	82 e3       	ldi	r24, 0x32	; 50
     d48:	62 e8       	ldi	r22, 0x82	; 130
     d4a:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		
		if(Center_white_line<0x10 && Left_white_line<0x10 && Right_white_line<0x10 && sharp11>400)	//All WL sensors are white and distance from front to the other room's wall is greater than 400mm
     d4e:	80 91 0b 02 	lds	r24, 0x020B
     d52:	80 31       	cpi	r24, 0x10	; 16
     d54:	08 f0       	brcs	.+2      	; 0xd58 <A+0x446>
     d56:	a3 cf       	rjmp	.-186    	; 0xc9e <A+0x38c>
     d58:	80 91 0c 02 	lds	r24, 0x020C
     d5c:	80 31       	cpi	r24, 0x10	; 16
     d5e:	08 f0       	brcs	.+2      	; 0xd62 <A+0x450>
     d60:	9e cf       	rjmp	.-196    	; 0xc9e <A+0x38c>
     d62:	80 91 0a 02 	lds	r24, 0x020A
     d66:	80 31       	cpi	r24, 0x10	; 16
     d68:	c0 f4       	brcc	.+48     	; 0xd9a <A+0x488>
     d6a:	80 91 0f 02 	lds	r24, 0x020F
     d6e:	90 91 10 02 	lds	r25, 0x0210
     d72:	21 e0       	ldi	r18, 0x01	; 1
     d74:	81 39       	cpi	r24, 0x91	; 145
     d76:	92 07       	cpc	r25, r18
     d78:	80 f0       	brcs	.+32     	; 0xd9a <A+0x488>
		{
			forward();
     d7a:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			
			velocity(150,150);
     d7e:	86 e9       	ldi	r24, 0x96	; 150
     d80:	66 e9       	ldi	r22, 0x96	; 150
     d82:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if(Center_white_line<0x10 && Left_white_line<0x10 && Right_white_line<0x10 && sharp11<=400)	//when bot exits the room, distance from front to the wall will be less than 400mm
     d86:	80 91 0b 02 	lds	r24, 0x020B
     d8a:	80 31       	cpi	r24, 0x10	; 16
     d8c:	08 f0       	brcs	.+2      	; 0xd90 <A+0x47e>
     d8e:	87 cf       	rjmp	.-242    	; 0xc9e <A+0x38c>
     d90:	80 91 0c 02 	lds	r24, 0x020C
     d94:	80 31       	cpi	r24, 0x10	; 16
     d96:	08 f0       	brcs	.+2      	; 0xd9a <A+0x488>
     d98:	82 cf       	rjmp	.-252    	; 0xc9e <A+0x38c>
     d9a:	80 91 0a 02 	lds	r24, 0x020A
     d9e:	80 31       	cpi	r24, 0x10	; 16
     da0:	08 f0       	brcs	.+2      	; 0xda4 <A+0x492>
     da2:	7d cf       	rjmp	.-262    	; 0xc9e <A+0x38c>
     da4:	80 91 0f 02 	lds	r24, 0x020F
     da8:	90 91 10 02 	lds	r25, 0x0210
     dac:	a1 e0       	ldi	r26, 0x01	; 1
     dae:	81 39       	cpi	r24, 0x91	; 145
     db0:	9a 07       	cpc	r25, r26
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <A+0x4a4>
     db4:	74 cf       	rjmp	.-280    	; 0xc9e <A+0x38c>
		{
			break;
		}

	}
	while (sharp11>200)	//move bot forward till it is 200mm from the wall
     db6:	89 3c       	cpi	r24, 0xC9	; 201
     db8:	91 05       	cpc	r25, r1
     dba:	b0 f0       	brcs	.+44     	; 0xde8 <A+0x4d6>
	{
		
		sharp11=ADC_Conversion(11);
     dbc:	8b e0       	ldi	r24, 0x0B	; 11
     dbe:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp11=Sharp_GP2D12_estimation(sharp11);
     dc2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
     dc6:	90 93 10 02 	sts	0x0210, r25
     dca:	80 93 0f 02 	sts	0x020F, r24
		forward();
     dce:	0e 94 43 03 	call	0x686	; 0x686 <forward>
		velocity(180,180);
     dd2:	84 eb       	ldi	r24, 0xB4	; 180
     dd4:	64 eb       	ldi	r22, 0xB4	; 180
     dd6:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		{
			break;
		}

	}
	while (sharp11>200)	//move bot forward till it is 200mm from the wall
     dda:	80 91 0f 02 	lds	r24, 0x020F
     dde:	90 91 10 02 	lds	r25, 0x0210
     de2:	89 3c       	cpi	r24, 0xC9	; 201
     de4:	91 05       	cpc	r25, r1
     de6:	50 f7       	brcc	.-44     	; 0xdbc <A+0x4aa>
		sharp11=ADC_Conversion(11);
		sharp11=Sharp_GP2D12_estimation(sharp11);
		forward();
		velocity(180,180);
	}
	soft_right_degrees(90);	//turn the bot right by 90 degrees
     de8:	8a e5       	ldi	r24, 0x5A	; 90
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 00 04 	call	0x800	; 0x800 <soft_right_degrees>
	while(1)	//Wall follower to reach the home circle
	{
		sharp9=ADC_Conversion(9);
     df0:	89 e0       	ldi	r24, 0x09	; 9
     df2:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp9=Sharp_GP2D12_estimation(sharp9);
     df6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
     dfa:	90 93 12 02 	sts	0x0212, r25
     dfe:	80 93 11 02 	sts	0x0211, r24
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     e02:	83 e0       	ldi	r24, 0x03	; 3
     e04:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     e08:	80 93 0c 02 	sts	0x020C, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     e12:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     e1c:	80 93 0a 02 	sts	0x020A, r24
		
		if (sharp9>200)	//distance of bot from wall is greater than 200mm, move to the left
     e20:	80 91 11 02 	lds	r24, 0x0211
     e24:	90 91 12 02 	lds	r25, 0x0212
     e28:	89 3c       	cpi	r24, 0xC9	; 201
     e2a:	91 05       	cpc	r25, r1
     e2c:	30 f0       	brcs	.+12     	; 0xe3a <A+0x528>
		{
			forward();
     e2e:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(50,130);
     e32:	82 e3       	ldi	r24, 0x32	; 50
     e34:	62 e8       	ldi	r22, 0x82	; 130
     e36:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		if (sharp9<200)	//distance of bot from wall is lesser than 200mm, move to the right
     e3a:	80 91 11 02 	lds	r24, 0x0211
     e3e:	90 91 12 02 	lds	r25, 0x0212
     e42:	88 3c       	cpi	r24, 0xC8	; 200
     e44:	91 05       	cpc	r25, r1
     e46:	30 f4       	brcc	.+12     	; 0xe54 <A+0x542>
		{
			forward();
     e48:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(130,50);
     e4c:	82 e8       	ldi	r24, 0x82	; 130
     e4e:	62 e3       	ldi	r22, 0x32	; 50
     e50:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		if (sharp9==200)	//distance of bot from wall is equal to 200mm, move forward
     e54:	80 91 11 02 	lds	r24, 0x0211
     e58:	90 91 12 02 	lds	r25, 0x0212
     e5c:	88 3c       	cpi	r24, 0xC8	; 200
     e5e:	91 05       	cpc	r25, r1
     e60:	31 f4       	brne	.+12     	; 0xe6e <A+0x55c>
		{
			forward();
     e62:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity (255,255);
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	6f ef       	ldi	r22, 0xFF	; 255
     e6a:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		if (Center_white_line>0x10 || Left_white_line>0x10 || Right_white_line>0x10)	//once black line of center circle is detected, exit the loop
     e6e:	80 91 0b 02 	lds	r24, 0x020B
     e72:	81 31       	cpi	r24, 0x11	; 17
     e74:	48 f4       	brcc	.+18     	; 0xe88 <A+0x576>
     e76:	80 91 0c 02 	lds	r24, 0x020C
     e7a:	81 31       	cpi	r24, 0x11	; 17
     e7c:	28 f4       	brcc	.+10     	; 0xe88 <A+0x576>
     e7e:	80 91 0a 02 	lds	r24, 0x020A
     e82:	81 31       	cpi	r24, 0x11	; 17
     e84:	08 f4       	brcc	.+2      	; 0xe88 <A+0x576>
     e86:	b4 cf       	rjmp	.-152    	; 0xdf0 <A+0x4de>
	}
	
	while(1)	//follow line till the center of the circle where all three WL sensors become black
	{
		
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     e88:	83 e0       	ldi	r24, 0x03	; 3
     e8a:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     e8e:	80 93 0c 02 	sts	0x020C, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     e98:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     ea2:	80 93 0a 02 	sts	0x020A, r24
		

		flag=0;
     ea6:	10 92 15 02 	sts	0x0215, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	43 e0       	ldi	r20, 0x03	; 3
     eb0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	65 e0       	ldi	r22, 0x05	; 5
     eb8:	42 e0       	ldi	r20, 0x02	; 2
     eba:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	69 e0       	ldi	r22, 0x09	; 9
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		
		if(Center_white_line>0x10)	//Center WL sensor black ,move forward
     ec8:	80 91 0b 02 	lds	r24, 0x020B
     ecc:	81 31       	cpi	r24, 0x11	; 17
     ece:	48 f0       	brcs	.+18     	; 0xee2 <A+0x5d0>
		{
			flag=1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	80 93 15 02 	sts	0x0215, r24
			forward();
     ed6:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(150,150);
     eda:	86 e9       	ldi	r24, 0x96	; 150
     edc:	66 e9       	ldi	r22, 0x96	; 150
     ede:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Left_white_line<0x10) && (flag==0))	//Left WL sensor is white and center is not black. move right
     ee2:	80 91 0c 02 	lds	r24, 0x020C
     ee6:	80 31       	cpi	r24, 0x10	; 16
     ee8:	68 f4       	brcc	.+26     	; 0xf04 <A+0x5f2>
     eea:	80 91 15 02 	lds	r24, 0x0215
     eee:	88 23       	and	r24, r24
     ef0:	49 f4       	brne	.+18     	; 0xf04 <A+0x5f2>
		{
			flag=1;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	80 93 15 02 	sts	0x0215, r24
			forward();
     ef8:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(130,50);
     efc:	82 e8       	ldi	r24, 0x82	; 130
     efe:	62 e3       	ldi	r22, 0x32	; 50
     f00:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Right_white_line<0x10) && (flag==0))	//Right WL sensor is white and center is not black. move left
     f04:	80 91 0a 02 	lds	r24, 0x020A
     f08:	80 31       	cpi	r24, 0x10	; 16
     f0a:	68 f4       	brcc	.+26     	; 0xf26 <A+0x614>
     f0c:	80 91 15 02 	lds	r24, 0x0215
     f10:	88 23       	and	r24, r24
     f12:	49 f4       	brne	.+18     	; 0xf26 <A+0x614>
		{
			flag=1;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	80 93 15 02 	sts	0x0215, r24
			forward();
     f1a:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(50,130);
     f1e:	82 e3       	ldi	r24, 0x32	; 50
     f20:	62 e8       	ldi	r22, 0x82	; 130
     f22:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}


		if(Center_white_line>0x10 && Left_white_line>0x10 && Right_white_line>0x10)	//All 3 WL sensors detect black line
     f26:	80 91 0b 02 	lds	r24, 0x020B
     f2a:	81 31       	cpi	r24, 0x11	; 17
     f2c:	08 f4       	brcc	.+2      	; 0xf30 <A+0x61e>
     f2e:	ac cf       	rjmp	.-168    	; 0xe88 <A+0x576>
     f30:	80 91 0c 02 	lds	r24, 0x020C
     f34:	81 31       	cpi	r24, 0x11	; 17
     f36:	08 f4       	brcc	.+2      	; 0xf3a <A+0x628>
     f38:	a7 cf       	rjmp	.-178    	; 0xe88 <A+0x576>
     f3a:	80 91 0a 02 	lds	r24, 0x020A
     f3e:	81 31       	cpi	r24, 0x11	; 17
     f40:	08 f4       	brcc	.+2      	; 0xf44 <A+0x632>
     f42:	a2 cf       	rjmp	.-188    	; 0xe88 <A+0x576>
		{
			soft_left_degrees(92);	//rotate bot by 92 degrees
     f44:	8c e5       	ldi	r24, 0x5C	; 92
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <soft_left_degrees>
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	9f ef       	ldi	r25, 0xFF	; 255
     f50:	ac e2       	ldi	r26, 0x2C	; 44
     f52:	81 50       	subi	r24, 0x01	; 1
     f54:	90 40       	sbci	r25, 0x00	; 0
     f56:	a0 40       	sbci	r26, 0x00	; 0
     f58:	e1 f7       	brne	.-8      	; 0xf52 <A+0x640>
     f5a:	00 c0       	rjmp	.+0      	; 0xf5c <A+0x64a>
     f5c:	00 00       	nop
			_delay_ms(1000);
			stop();
     f5e:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
     f62:	8f ef       	ldi	r24, 0xFF	; 255
     f64:	9f ef       	ldi	r25, 0xFF	; 255
     f66:	ac e2       	ldi	r26, 0x2C	; 44
     f68:	81 50       	subi	r24, 0x01	; 1
     f6a:	90 40       	sbci	r25, 0x00	; 0
     f6c:	a0 40       	sbci	r26, 0x00	; 0
     f6e:	e1 f7       	brne	.-8      	; 0xf68 <A+0x656>
     f70:	00 c0       	rjmp	.+0      	; 0xf72 <A+0x660>
     f72:	00 00       	nop
			_delay_ms(1000);
			count++;	//increment checked room count
     f74:	80 91 13 02 	lds	r24, 0x0213
     f78:	8f 5f       	subi	r24, 0xFF	; 255
     f7a:	80 93 13 02 	sts	0x0213, r24
			break;
		}
	}	
}
     f7e:	08 95       	ret

00000f80 <B>:
* Example Call:		B();
*
*/
void B (void)
{
	while(Left_white_line<0x10&&Center_white_line<0x10&&Right_white_line<0x10) //move bot forward till black line is detected
     f80:	80 91 0c 02 	lds	r24, 0x020C
     f84:	80 31       	cpi	r24, 0x10	; 16
     f86:	48 f5       	brcc	.+82     	; 0xfda <B+0x5a>
     f88:	80 91 0b 02 	lds	r24, 0x020B
     f8c:	80 31       	cpi	r24, 0x10	; 16
     f8e:	28 f5       	brcc	.+74     	; 0xfda <B+0x5a>
     f90:	80 91 0a 02 	lds	r24, 0x020A
     f94:	80 31       	cpi	r24, 0x10	; 16
     f96:	08 f5       	brcc	.+66     	; 0xfda <B+0x5a>
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     f98:	83 e0       	ldi	r24, 0x03	; 3
     f9a:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     f9e:	80 93 0c 02 	sts	0x020C, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     fa8:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     fb2:	80 93 0a 02 	sts	0x020A, r24
		
		forward();
     fb6:	0e 94 43 03 	call	0x686	; 0x686 <forward>
		velocity(150,150);
     fba:	86 e9       	ldi	r24, 0x96	; 150
     fbc:	66 e9       	ldi	r22, 0x96	; 150
     fbe:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
* Example Call:		B();
*
*/
void B (void)
{
	while(Left_white_line<0x10&&Center_white_line<0x10&&Right_white_line<0x10) //move bot forward till black line is detected
     fc2:	80 91 0c 02 	lds	r24, 0x020C
     fc6:	80 31       	cpi	r24, 0x10	; 16
     fc8:	40 f4       	brcc	.+16     	; 0xfda <B+0x5a>
     fca:	80 91 0b 02 	lds	r24, 0x020B
     fce:	80 31       	cpi	r24, 0x10	; 16
     fd0:	20 f4       	brcc	.+8      	; 0xfda <B+0x5a>
     fd2:	80 91 0a 02 	lds	r24, 0x020A
     fd6:	80 31       	cpi	r24, 0x10	; 16
     fd8:	f8 f2       	brcs	.-66     	; 0xf98 <B+0x18>
		velocity(150,150);
	}
	while(1)	//movement of the bot till fire LED is detected or till end of room is reached
	{
		
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     fda:	83 e0       	ldi	r24, 0x03	; 3
     fdc:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     fe0:	80 93 0c 02 	sts	0x020C, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     fea:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
     ff4:	80 93 0a 02 	sts	0x020A, r24
		sharp11=ADC_Conversion(11);				//Getting data of Sharp Sensor 3 
     ff8:	8b e0       	ldi	r24, 0x0B	; 11
     ffa:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp11=Sharp_GP2D12_estimation(sharp11);	//Converting Sharp Sensor value to mm
     ffe:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
    1002:	90 93 10 02 	sts	0x0210, r25
    1006:	80 93 0f 02 	sts	0x020F, r24
		sharp9=ADC_Conversion(9);				//Getting data of Sharp Sensor 1
    100a:	89 e0       	ldi	r24, 0x09	; 9
    100c:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp9=Sharp_GP2D12_estimation(sharp9);	//Converting Sharp Sensor value to mm
    1010:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
    1014:	90 93 12 02 	sts	0x0212, r25
    1018:	80 93 11 02 	sts	0x0211, r24
		LED=ADC_Conversion(7);					//Getting data of center WL sensor attached in place of IR sensor 
    101c:	87 e0       	ldi	r24, 0x07	; 7
    101e:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    1022:	80 93 00 02 	sts	0x0200, r24
    1026:	10 92 01 02 	sts	0x0201, r1

		flag=0;
    102a:	10 92 15 02 	sts	0x0215, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	43 e0       	ldi	r20, 0x03	; 3
    1034:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	65 e0       	ldi	r22, 0x05	; 5
    103c:	42 e0       	ldi	r20, 0x02	; 2
    103e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	69 e0       	ldi	r22, 0x09	; 9
    1046:	41 e0       	ldi	r20, 0x01	; 1
    1048:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		
		if(Center_white_line>0x10)//If center WL sensor is black, move forward
    104c:	80 91 0b 02 	lds	r24, 0x020B
    1050:	81 31       	cpi	r24, 0x11	; 17
    1052:	48 f0       	brcs	.+18     	; 0x1066 <B+0xe6>
		{
			flag=1;
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	80 93 15 02 	sts	0x0215, r24
			forward();
    105a:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(150,150);
    105e:	86 e9       	ldi	r24, 0x96	; 150
    1060:	66 e9       	ldi	r22, 0x96	; 150
    1062:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Left_white_line<0x10) && (flag==0))//If left WL sensor is white and center WL is not black, turn right 
    1066:	80 91 0c 02 	lds	r24, 0x020C
    106a:	80 31       	cpi	r24, 0x10	; 16
    106c:	68 f4       	brcc	.+26     	; 0x1088 <B+0x108>
    106e:	80 91 15 02 	lds	r24, 0x0215
    1072:	88 23       	and	r24, r24
    1074:	49 f4       	brne	.+18     	; 0x1088 <B+0x108>
		{
			flag=1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	80 93 15 02 	sts	0x0215, r24
			forward();
    107c:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(130,50);
    1080:	82 e8       	ldi	r24, 0x82	; 130
    1082:	62 e3       	ldi	r22, 0x32	; 50
    1084:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Right_white_line<0x10) && (flag==0))//If right WL sensor is white and center WL is not black, turn left
    1088:	80 91 0a 02 	lds	r24, 0x020A
    108c:	80 31       	cpi	r24, 0x10	; 16
    108e:	68 f4       	brcc	.+26     	; 0x10aa <B+0x12a>
    1090:	80 91 15 02 	lds	r24, 0x0215
    1094:	88 23       	and	r24, r24
    1096:	49 f4       	brne	.+18     	; 0x10aa <B+0x12a>
		{
			flag=1;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	80 93 15 02 	sts	0x0215, r24
			forward();
    109e:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(50,130);
    10a2:	82 e3       	ldi	r24, 0x32	; 50
    10a4:	62 e8       	ldi	r22, 0x82	; 130
    10a6:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if(Center_white_line<0x10 && Left_white_line<0x10 && Right_white_line<0x10)	//If all three WL sensors are white, turn left at the corners
    10aa:	80 91 0b 02 	lds	r24, 0x020B
    10ae:	80 31       	cpi	r24, 0x10	; 16
    10b0:	70 f4       	brcc	.+28     	; 0x10ce <B+0x14e>
    10b2:	80 91 0c 02 	lds	r24, 0x020C
    10b6:	80 31       	cpi	r24, 0x10	; 16
    10b8:	50 f4       	brcc	.+20     	; 0x10ce <B+0x14e>
    10ba:	80 91 0a 02 	lds	r24, 0x020A
    10be:	80 31       	cpi	r24, 0x10	; 16
    10c0:	30 f4       	brcc	.+12     	; 0x10ce <B+0x14e>
		{
			forward();
    10c2:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			
			velocity(50,130);
    10c6:	82 e3       	ldi	r24, 0x32	; 50
    10c8:	62 e8       	ldi	r22, 0x82	; 130
    10ca:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		
		if (LED<0x10 && sharp11<275)//Condition for fire LED present
    10ce:	80 91 00 02 	lds	r24, 0x0200
    10d2:	90 91 01 02 	lds	r25, 0x0201
    10d6:	80 31       	cpi	r24, 0x10	; 16
    10d8:	91 05       	cpc	r25, r1
    10da:	0c f0       	brlt	.+2      	; 0x10de <B+0x15e>
    10dc:	68 c0       	rjmp	.+208    	; 0x11ae <B+0x22e>
    10de:	80 91 0f 02 	lds	r24, 0x020F
    10e2:	90 91 10 02 	lds	r25, 0x0210
    10e6:	21 e0       	ldi	r18, 0x01	; 1
    10e8:	83 31       	cpi	r24, 0x13	; 19
    10ea:	92 07       	cpc	r25, r18
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <B+0x170>
    10ee:	5f c0       	rjmp	.+190    	; 0x11ae <B+0x22e>
		{
		
			stop();
    10f0:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
			angle+=45;	//increase angle the servo must rotate by 45 degrees
    10f4:	80 91 16 02 	lds	r24, 0x0216
    10f8:	90 91 17 02 	lds	r25, 0x0217
    10fc:	8d 96       	adiw	r24, 0x2d	; 45
    10fe:	90 93 17 02 	sts	0x0217, r25
    1102:	80 93 16 02 	sts	0x0216, r24
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	9f eb       	ldi	r25, 0xBF	; 191
    110a:	a1 e2       	ldi	r26, 0x21	; 33
    110c:	81 50       	subi	r24, 0x01	; 1
    110e:	90 40       	sbci	r25, 0x00	; 0
    1110:	a0 40       	sbci	r26, 0x00	; 0
    1112:	e1 f7       	brne	.-8      	; 0x110c <B+0x18c>
    1114:	00 c0       	rjmp	.+0      	; 0x1116 <B+0x196>
    1116:	00 00       	nop
			_delay_ms(750);
			//sound buzzer for 1 second
			DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    1118:	3b 9a       	sbi	0x07, 3	; 7
			PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    111a:	43 98       	cbi	0x08, 3	; 8
			unsigned char port_restore = 0;
			port_restore = PINC;
    111c:	86 b1       	in	r24, 0x06	; 6
			port_restore = port_restore | 0x08;
    111e:	88 60       	ori	r24, 0x08	; 8
			PORTC = port_restore;
    1120:	88 b9       	out	0x08, r24	; 8
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	9f ef       	ldi	r25, 0xFF	; 255
    1126:	ac e2       	ldi	r26, 0x2C	; 44
    1128:	81 50       	subi	r24, 0x01	; 1
    112a:	90 40       	sbci	r25, 0x00	; 0
    112c:	a0 40       	sbci	r26, 0x00	; 0
    112e:	e1 f7       	brne	.-8      	; 0x1128 <B+0x1a8>
    1130:	00 c0       	rjmp	.+0      	; 0x1132 <B+0x1b2>
    1132:	00 00       	nop
			_delay_ms(1000);		//delay
			//switch off buzzer
			port_restore = PINC;
    1134:	86 b1       	in	r24, 0x06	; 6
			port_restore = port_restore & 0xF7;
    1136:	87 7f       	andi	r24, 0xF7	; 247
			PORTC = port_restore;
    1138:	88 b9       	out	0x08, r24	; 8
    113a:	8f ef       	ldi	r24, 0xFF	; 255
    113c:	9f ef       	ldi	r25, 0xFF	; 255
    113e:	ac e2       	ldi	r26, 0x2C	; 44
    1140:	81 50       	subi	r24, 0x01	; 1
    1142:	90 40       	sbci	r25, 0x00	; 0
    1144:	a0 40       	sbci	r26, 0x00	; 0
    1146:	e1 f7       	brne	.-8      	; 0x1140 <B+0x1c0>
    1148:	00 c0       	rjmp	.+0      	; 0x114a <B+0x1ca>
    114a:	00 00       	nop
			_delay_ms(1000);		//delay
			servo_1(angle); //rotate the mechanism and drop the magnet to put out the fire
    114c:	80 91 16 02 	lds	r24, 0x0216
    1150:	0e 94 0d 04 	call	0x81a	; 0x81a <servo_1>
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	9f ef       	ldi	r25, 0xFF	; 255
    1158:	ac e2       	ldi	r26, 0x2C	; 44
    115a:	81 50       	subi	r24, 0x01	; 1
    115c:	90 40       	sbci	r25, 0x00	; 0
    115e:	a0 40       	sbci	r26, 0x00	; 0
    1160:	e1 f7       	brne	.-8      	; 0x115a <B+0x1da>
    1162:	00 c0       	rjmp	.+0      	; 0x1164 <B+0x1e4>
    1164:	00 00       	nop
			_delay_ms(1000);
				
			stop();
    1166:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	9f ef       	ldi	r25, 0xFF	; 255
    116e:	ac e2       	ldi	r26, 0x2C	; 44
    1170:	81 50       	subi	r24, 0x01	; 1
    1172:	90 40       	sbci	r25, 0x00	; 0
    1174:	a0 40       	sbci	r26, 0x00	; 0
    1176:	e1 f7       	brne	.-8      	; 0x1170 <B+0x1f0>
    1178:	00 c0       	rjmp	.+0      	; 0x117a <B+0x1fa>
    117a:	00 00       	nop
			_delay_ms(1000);
			right_degrees(180); //make 180 degree turn
    117c:	84 eb       	ldi	r24, 0xB4	; 180
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <right_degrees>
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	9f ef       	ldi	r25, 0xFF	; 255
    1188:	ac e2       	ldi	r26, 0x2C	; 44
    118a:	81 50       	subi	r24, 0x01	; 1
    118c:	90 40       	sbci	r25, 0x00	; 0
    118e:	a0 40       	sbci	r26, 0x00	; 0
    1190:	e1 f7       	brne	.-8      	; 0x118a <B+0x20a>
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <B+0x214>
    1194:	00 00       	nop
			_delay_ms(1000);
			stop();
    1196:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	9f ef       	ldi	r25, 0xFF	; 255
    119e:	ac e2       	ldi	r26, 0x2C	; 44
    11a0:	81 50       	subi	r24, 0x01	; 1
    11a2:	90 40       	sbci	r25, 0x00	; 0
    11a4:	a0 40       	sbci	r26, 0x00	; 0
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <B+0x220>
    11a8:	00 c0       	rjmp	.+0      	; 0x11aa <B+0x22a>
    11aa:	00 00       	nop
    11ac:	2b c0       	rjmp	.+86     	; 0x1204 <B+0x284>
			_delay_ms(1000);
			
			break;
		}	
		if(sharp11<100)//condition for no fire LED present. True when it reaches the end of the room
    11ae:	80 91 0f 02 	lds	r24, 0x020F
    11b2:	90 91 10 02 	lds	r25, 0x0210
    11b6:	84 36       	cpi	r24, 0x64	; 100
    11b8:	91 05       	cpc	r25, r1
    11ba:	08 f0       	brcs	.+2      	; 0x11be <B+0x23e>
    11bc:	0e cf       	rjmp	.-484    	; 0xfda <B+0x5a>
		{
			stop();
    11be:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	9f ef       	ldi	r25, 0xFF	; 255
    11c6:	ac e2       	ldi	r26, 0x2C	; 44
    11c8:	81 50       	subi	r24, 0x01	; 1
    11ca:	90 40       	sbci	r25, 0x00	; 0
    11cc:	a0 40       	sbci	r26, 0x00	; 0
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <B+0x248>
    11d0:	00 c0       	rjmp	.+0      	; 0x11d2 <B+0x252>
    11d2:	00 00       	nop
			_delay_ms(1000);
			right_degrees(180);//Make 180 degree turn
    11d4:	84 eb       	ldi	r24, 0xB4	; 180
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <right_degrees>
    11dc:	8f ef       	ldi	r24, 0xFF	; 255
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	ac e2       	ldi	r26, 0x2C	; 44
    11e2:	81 50       	subi	r24, 0x01	; 1
    11e4:	90 40       	sbci	r25, 0x00	; 0
    11e6:	a0 40       	sbci	r26, 0x00	; 0
    11e8:	e1 f7       	brne	.-8      	; 0x11e2 <B+0x262>
    11ea:	00 c0       	rjmp	.+0      	; 0x11ec <B+0x26c>
    11ec:	00 00       	nop
			_delay_ms(1000);
			stop();
    11ee:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
    11f2:	8f ef       	ldi	r24, 0xFF	; 255
    11f4:	9f ef       	ldi	r25, 0xFF	; 255
    11f6:	ac e2       	ldi	r26, 0x2C	; 44
    11f8:	81 50       	subi	r24, 0x01	; 1
    11fa:	90 40       	sbci	r25, 0x00	; 0
    11fc:	a0 40       	sbci	r26, 0x00	; 0
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <B+0x278>
    1200:	00 c0       	rjmp	.+0      	; 0x1202 <B+0x282>
    1202:	00 00       	nop
		}		
		
		
		
	}
	fl=0;
    1204:	10 92 14 02 	sts	0x0214, r1
	while(1)	//movement of bot after LED detection or after reaching end of the room
				//similar to previous loop except that WL all white turns the bot right
	{
		
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    120e:	80 93 0c 02 	sts	0x020C, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    1218:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    1222:	80 93 0a 02 	sts	0x020A, r24
		sharp11=ADC_Conversion(11);				//Getting data of Sharp Sensor 1
    1226:	8b e0       	ldi	r24, 0x0B	; 11
    1228:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp11=Sharp_GP2D12_estimation(sharp11);	//Converting Sharp Sensor value to mm
    122c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
    1230:	90 93 10 02 	sts	0x0210, r25
    1234:	80 93 0f 02 	sts	0x020F, r24
		sharp13=ADC_Conversion(13);				//Getting data of Sharp Sensor 5
    1238:	8d e0       	ldi	r24, 0x0D	; 13
    123a:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp13=Sharp_GP2D12_estimation(sharp13);	//Converting Sharp Sensor value to mm
    123e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
    1242:	90 93 0e 02 	sts	0x020E, r25
    1246:	80 93 0d 02 	sts	0x020D, r24
		
		flag=0;
    124a:	10 92 15 02 	sts	0x0215, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	43 e0       	ldi	r20, 0x03	; 3
    1254:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	65 e0       	ldi	r22, 0x05	; 5
    125c:	42 e0       	ldi	r20, 0x02	; 2
    125e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	69 e0       	ldi	r22, 0x09	; 9
    1266:	41 e0       	ldi	r20, 0x01	; 1
    1268:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		
		

		if(Center_white_line>0x10)	//Move forward if Center WL reads black
    126c:	80 91 0b 02 	lds	r24, 0x020B
    1270:	81 31       	cpi	r24, 0x11	; 17
    1272:	48 f0       	brcs	.+18     	; 0x1286 <B+0x306>
		{
			flag=1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 15 02 	sts	0x0215, r24
			forward();
    127a:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(150,150);
    127e:	86 e9       	ldi	r24, 0x96	; 150
    1280:	66 e9       	ldi	r22, 0x96	; 150
    1282:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Left_white_line<0x10) && (flag==0))	//If Left WL is white and center is not black, turn right
    1286:	80 91 0c 02 	lds	r24, 0x020C
    128a:	80 31       	cpi	r24, 0x10	; 16
    128c:	68 f4       	brcc	.+26     	; 0x12a8 <B+0x328>
    128e:	80 91 15 02 	lds	r24, 0x0215
    1292:	88 23       	and	r24, r24
    1294:	49 f4       	brne	.+18     	; 0x12a8 <B+0x328>
		{
			flag=1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	80 93 15 02 	sts	0x0215, r24
			forward();
    129c:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(130,50);
    12a0:	82 e8       	ldi	r24, 0x82	; 130
    12a2:	62 e3       	ldi	r22, 0x32	; 50
    12a4:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Right_white_line<0x10) && (flag==0))	//If Right WL is white and center is not black, turn left
    12a8:	80 91 0a 02 	lds	r24, 0x020A
    12ac:	80 31       	cpi	r24, 0x10	; 16
    12ae:	68 f4       	brcc	.+26     	; 0x12ca <B+0x34a>
    12b0:	80 91 15 02 	lds	r24, 0x0215
    12b4:	88 23       	and	r24, r24
    12b6:	49 f4       	brne	.+18     	; 0x12ca <B+0x34a>
		{
			flag=1;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	80 93 15 02 	sts	0x0215, r24
			forward();
    12be:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(50,130);
    12c2:	82 e3       	ldi	r24, 0x32	; 50
    12c4:	62 e8       	ldi	r22, 0x82	; 130
    12c6:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		
		if(Center_white_line<0x10 && Left_white_line<0x10 && Right_white_line<0x10)	//If all three WL sensors are white, turn left at the corners
    12ca:	80 91 0b 02 	lds	r24, 0x020B
    12ce:	80 31       	cpi	r24, 0x10	; 16
    12d0:	88 f4       	brcc	.+34     	; 0x12f4 <B+0x374>
    12d2:	80 91 0c 02 	lds	r24, 0x020C
    12d6:	80 31       	cpi	r24, 0x10	; 16
    12d8:	68 f4       	brcc	.+26     	; 0x12f4 <B+0x374>
    12da:	80 91 0a 02 	lds	r24, 0x020A
    12de:	80 31       	cpi	r24, 0x10	; 16
    12e0:	48 f4       	brcc	.+18     	; 0x12f4 <B+0x374>
		{
			forward();
    12e2:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			fl=1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	80 93 14 02 	sts	0x0214, r24
			velocity(130,50);
    12ec:	82 e8       	ldi	r24, 0x82	; 130
    12ee:	62 e3       	ldi	r22, 0x32	; 50
    12f0:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		if(sharp13>650)	//Sharp Sensor 5 detects door at corner before it turns, sharp sensor 5 is greater than 650mm
    12f4:	80 91 0d 02 	lds	r24, 0x020D
    12f8:	90 91 0e 02 	lds	r25, 0x020E
    12fc:	a2 e0       	ldi	r26, 0x02	; 2
    12fe:	8b 38       	cpi	r24, 0x8B	; 139
    1300:	9a 07       	cpc	r25, r26
    1302:	18 f0       	brcs	.+6      	; 0x130a <B+0x38a>
			fl=1;//sets flag fl
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	80 93 14 02 	sts	0x0214, r24
		if(Center_white_line>0x10 && sharp11>650 && fl==1)	//condition that the Center WL sensor is black and Sharp Sensor 3 detects a door
    130a:	80 91 0b 02 	lds	r24, 0x020B
    130e:	81 31       	cpi	r24, 0x11	; 17
    1310:	08 f4       	brcc	.+2      	; 0x1314 <B+0x394>
    1312:	7a cf       	rjmp	.-268    	; 0x1208 <B+0x288>
    1314:	80 91 0f 02 	lds	r24, 0x020F
    1318:	90 91 10 02 	lds	r25, 0x0210
    131c:	b2 e0       	ldi	r27, 0x02	; 2
    131e:	8b 38       	cpi	r24, 0x8B	; 139
    1320:	9b 07       	cpc	r25, r27
    1322:	08 f4       	brcc	.+2      	; 0x1326 <B+0x3a6>
    1324:	71 cf       	rjmp	.-286    	; 0x1208 <B+0x288>
    1326:	80 91 14 02 	lds	r24, 0x0214
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	09 f0       	breq	.+2      	; 0x1330 <B+0x3b0>
    132e:	6c cf       	rjmp	.-296    	; 0x1208 <B+0x288>
	}
	
	while(1)	//similar to previous loop except that WL all white moves bot forward
	{
		
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1330:	83 e0       	ldi	r24, 0x03	; 3
    1332:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    1336:	80 93 0c 02 	sts	0x020C, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    1340:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    134a:	80 93 0a 02 	sts	0x020A, r24
		sharp11=ADC_Conversion(11);	//Getting data of Sharp Sensor 3
    134e:	8b e0       	ldi	r24, 0x0B	; 11
    1350:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp11=Sharp_GP2D12_estimation(sharp11);	//Getting data of Sharp Sensor 3
    1354:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
    1358:	90 93 10 02 	sts	0x0210, r25
    135c:	80 93 0f 02 	sts	0x020F, r24
		

		flag=0;
    1360:	10 92 15 02 	sts	0x0215, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	61 e0       	ldi	r22, 0x01	; 1
    1368:	43 e0       	ldi	r20, 0x03	; 3
    136a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	65 e0       	ldi	r22, 0x05	; 5
    1372:	42 e0       	ldi	r20, 0x02	; 2
    1374:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	69 e0       	ldi	r22, 0x09	; 9
    137c:	41 e0       	ldi	r20, 0x01	; 1
    137e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		
		if(Center_white_line>0x10)	//Move forward if Center WL reads black
    1382:	80 91 0b 02 	lds	r24, 0x020B
    1386:	81 31       	cpi	r24, 0x11	; 17
    1388:	48 f0       	brcs	.+18     	; 0x139c <B+0x41c>
		{
			flag=1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	80 93 15 02 	sts	0x0215, r24
			forward();
    1390:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(150,150);
    1394:	86 e9       	ldi	r24, 0x96	; 150
    1396:	66 e9       	ldi	r22, 0x96	; 150
    1398:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Left_white_line<0x10) && (flag==0))	//If Left WL is white and center is not black, turn right
    139c:	80 91 0c 02 	lds	r24, 0x020C
    13a0:	80 31       	cpi	r24, 0x10	; 16
    13a2:	68 f4       	brcc	.+26     	; 0x13be <B+0x43e>
    13a4:	80 91 15 02 	lds	r24, 0x0215
    13a8:	88 23       	and	r24, r24
    13aa:	49 f4       	brne	.+18     	; 0x13be <B+0x43e>
		{
			flag=1;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	80 93 15 02 	sts	0x0215, r24
			forward();
    13b2:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(130,50);
    13b6:	82 e8       	ldi	r24, 0x82	; 130
    13b8:	62 e3       	ldi	r22, 0x32	; 50
    13ba:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Right_white_line<0x10) && (flag==0))	//If Right WL is white and center is not black, turn left
    13be:	80 91 0a 02 	lds	r24, 0x020A
    13c2:	80 31       	cpi	r24, 0x10	; 16
    13c4:	68 f4       	brcc	.+26     	; 0x13e0 <B+0x460>
    13c6:	80 91 15 02 	lds	r24, 0x0215
    13ca:	88 23       	and	r24, r24
    13cc:	49 f4       	brne	.+18     	; 0x13e0 <B+0x460>
		{
			flag=1;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	80 93 15 02 	sts	0x0215, r24
			forward();
    13d4:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(50,130);
    13d8:	82 e3       	ldi	r24, 0x32	; 50
    13da:	62 e8       	ldi	r22, 0x82	; 130
    13dc:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		
		if(Center_white_line<0x10 && Left_white_line<0x10 && Right_white_line<0x10 && sharp11>400) //All WL sensors are white but sharp 3 is greater than 400mm, move forward
    13e0:	80 91 0b 02 	lds	r24, 0x020B
    13e4:	80 31       	cpi	r24, 0x10	; 16
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <B+0x46a>
    13e8:	a3 cf       	rjmp	.-186    	; 0x1330 <B+0x3b0>
    13ea:	80 91 0c 02 	lds	r24, 0x020C
    13ee:	80 31       	cpi	r24, 0x10	; 16
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <B+0x474>
    13f2:	9e cf       	rjmp	.-196    	; 0x1330 <B+0x3b0>
    13f4:	80 91 0a 02 	lds	r24, 0x020A
    13f8:	80 31       	cpi	r24, 0x10	; 16
    13fa:	c0 f4       	brcc	.+48     	; 0x142c <B+0x4ac>
    13fc:	80 91 0f 02 	lds	r24, 0x020F
    1400:	90 91 10 02 	lds	r25, 0x0210
    1404:	21 e0       	ldi	r18, 0x01	; 1
    1406:	81 39       	cpi	r24, 0x91	; 145
    1408:	92 07       	cpc	r25, r18
    140a:	80 f0       	brcs	.+32     	; 0x142c <B+0x4ac>
		{
			forward();
    140c:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			
			velocity(150,150);
    1410:	86 e9       	ldi	r24, 0x96	; 150
    1412:	66 e9       	ldi	r22, 0x96	; 150
    1414:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if(Center_white_line<0x10 && Left_white_line<0x10 && Right_white_line<0x10 && sharp11<=400) //All WL sensors are white and sharp 3 is lesser than or equal to 400mm
    1418:	80 91 0b 02 	lds	r24, 0x020B
    141c:	80 31       	cpi	r24, 0x10	; 16
    141e:	08 f0       	brcs	.+2      	; 0x1422 <B+0x4a2>
    1420:	87 cf       	rjmp	.-242    	; 0x1330 <B+0x3b0>
    1422:	80 91 0c 02 	lds	r24, 0x020C
    1426:	80 31       	cpi	r24, 0x10	; 16
    1428:	08 f0       	brcs	.+2      	; 0x142c <B+0x4ac>
    142a:	82 cf       	rjmp	.-252    	; 0x1330 <B+0x3b0>
    142c:	80 91 0a 02 	lds	r24, 0x020A
    1430:	80 31       	cpi	r24, 0x10	; 16
    1432:	08 f0       	brcs	.+2      	; 0x1436 <B+0x4b6>
    1434:	7d cf       	rjmp	.-262    	; 0x1330 <B+0x3b0>
    1436:	80 91 0f 02 	lds	r24, 0x020F
    143a:	90 91 10 02 	lds	r25, 0x0210
    143e:	a1 e0       	ldi	r26, 0x01	; 1
    1440:	81 39       	cpi	r24, 0x91	; 145
    1442:	9a 07       	cpc	r25, r26
    1444:	08 f0       	brcs	.+2      	; 0x1448 <B+0x4c8>
    1446:	74 cf       	rjmp	.-280    	; 0x1330 <B+0x3b0>
		{
			break;	//exit current function
		}

	}
	while (sharp11>200)	//move forward till bot is 200mm from wall
    1448:	89 3c       	cpi	r24, 0xC9	; 201
    144a:	91 05       	cpc	r25, r1
    144c:	b0 f0       	brcs	.+44     	; 0x147a <B+0x4fa>
	{
		sharp11=ADC_Conversion(11);
    144e:	8b e0       	ldi	r24, 0x0B	; 11
    1450:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp11=Sharp_GP2D12_estimation(sharp11);
    1454:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
    1458:	90 93 10 02 	sts	0x0210, r25
    145c:	80 93 0f 02 	sts	0x020F, r24
		
		forward();
    1460:	0e 94 43 03 	call	0x686	; 0x686 <forward>
		velocity(130,130);
    1464:	82 e8       	ldi	r24, 0x82	; 130
    1466:	62 e8       	ldi	r22, 0x82	; 130
    1468:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		{
			break;	//exit current function
		}

	}
	while (sharp11>200)	//move forward till bot is 200mm from wall
    146c:	80 91 0f 02 	lds	r24, 0x020F
    1470:	90 91 10 02 	lds	r25, 0x0210
    1474:	89 3c       	cpi	r24, 0xC9	; 201
    1476:	91 05       	cpc	r25, r1
    1478:	50 f7       	brcc	.-44     	; 0x144e <B+0x4ce>
		sharp11=Sharp_GP2D12_estimation(sharp11);
		
		forward();
		velocity(130,130);
	}
	soft_right_degrees(90);	//turn bot right by 90 degrees
    147a:	8a e5       	ldi	r24, 0x5A	; 90
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 00 04 	call	0x800	; 0x800 <soft_right_degrees>
	while(1)	//Wall following till center home circle
	{
		
		sharp9=ADC_Conversion(9);
    1482:	89 e0       	ldi	r24, 0x09	; 9
    1484:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
		sharp9=Sharp_GP2D12_estimation(sharp9);
    1488:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
    148c:	90 93 12 02 	sts	0x0212, r25
    1490:	80 93 11 02 	sts	0x0211, r24
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    149a:	80 93 0c 02 	sts	0x020C, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    14a4:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    14ae:	80 93 0a 02 	sts	0x020A, r24
		
		if (sharp9>200)	//bot is more than 200mm from wall, move to the left
    14b2:	80 91 11 02 	lds	r24, 0x0211
    14b6:	90 91 12 02 	lds	r25, 0x0212
    14ba:	89 3c       	cpi	r24, 0xC9	; 201
    14bc:	91 05       	cpc	r25, r1
    14be:	30 f0       	brcs	.+12     	; 0x14cc <B+0x54c>
		{
			forward();
    14c0:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(50,130);
    14c4:	82 e3       	ldi	r24, 0x32	; 50
    14c6:	62 e8       	ldi	r22, 0x82	; 130
    14c8:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		if (sharp9<200)	//bot is less than 200mm from wall, move to the right
    14cc:	80 91 11 02 	lds	r24, 0x0211
    14d0:	90 91 12 02 	lds	r25, 0x0212
    14d4:	88 3c       	cpi	r24, 0xC8	; 200
    14d6:	91 05       	cpc	r25, r1
    14d8:	30 f4       	brcc	.+12     	; 0x14e6 <B+0x566>
		{
			forward();
    14da:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(130,50);
    14de:	82 e8       	ldi	r24, 0x82	; 130
    14e0:	62 e3       	ldi	r22, 0x32	; 50
    14e2:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		if (sharp9==200)	//bot is equal to 200mm from wall, move forward
    14e6:	80 91 11 02 	lds	r24, 0x0211
    14ea:	90 91 12 02 	lds	r25, 0x0212
    14ee:	88 3c       	cpi	r24, 0xC8	; 200
    14f0:	91 05       	cpc	r25, r1
    14f2:	31 f4       	brne	.+12     	; 0x1500 <B+0x580>
		{
			forward();
    14f4:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity (255,255);
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	6f ef       	ldi	r22, 0xFF	; 255
    14fc:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}
		if (Center_white_line>0x10 || Left_white_line>0x10 || Right_white_line>0x10)	//Detection of black line of home circle
    1500:	80 91 0b 02 	lds	r24, 0x020B
    1504:	81 31       	cpi	r24, 0x11	; 17
    1506:	48 f4       	brcc	.+18     	; 0x151a <B+0x59a>
    1508:	80 91 0c 02 	lds	r24, 0x020C
    150c:	81 31       	cpi	r24, 0x11	; 17
    150e:	28 f4       	brcc	.+10     	; 0x151a <B+0x59a>
    1510:	80 91 0a 02 	lds	r24, 0x020A
    1514:	81 31       	cpi	r24, 0x11	; 17
    1516:	08 f4       	brcc	.+2      	; 0x151a <B+0x59a>
    1518:	b4 cf       	rjmp	.-152    	; 0x1482 <B+0x502>
	}
	
	while(1)	//line following till center of home cirlce is reached
	{
		
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    1520:	80 93 0c 02 	sts	0x020C, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    152a:	80 93 0b 02 	sts	0x020B, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
    1534:	80 93 0a 02 	sts	0x020A, r24
	

		flag=0;
    1538:	10 92 15 02 	sts	0x0215, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	43 e0       	ldi	r20, 0x03	; 3
    1542:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	65 e0       	ldi	r22, 0x05	; 5
    154a:	42 e0       	ldi	r20, 0x02	; 2
    154c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	69 e0       	ldi	r22, 0x09	; 9
    1554:	41 e0       	ldi	r20, 0x01	; 1
    1556:	0e 94 70 04 	call	0x8e0	; 0x8e0 <print_sensor>
	
		if(Center_white_line>0x10)	//Move forward if Center WL reads black
    155a:	80 91 0b 02 	lds	r24, 0x020B
    155e:	81 31       	cpi	r24, 0x11	; 17
    1560:	48 f0       	brcs	.+18     	; 0x1574 <B+0x5f4>
		{
			flag=1;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	80 93 15 02 	sts	0x0215, r24
			forward();
    1568:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(150,150);
    156c:	86 e9       	ldi	r24, 0x96	; 150
    156e:	66 e9       	ldi	r22, 0x96	; 150
    1570:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Left_white_line<0x10) && (flag==0))	//If Left WL is white and center is not black, turn right
    1574:	80 91 0c 02 	lds	r24, 0x020C
    1578:	80 31       	cpi	r24, 0x10	; 16
    157a:	68 f4       	brcc	.+26     	; 0x1596 <B+0x616>
    157c:	80 91 15 02 	lds	r24, 0x0215
    1580:	88 23       	and	r24, r24
    1582:	49 f4       	brne	.+18     	; 0x1596 <B+0x616>
		{
			flag=1;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	80 93 15 02 	sts	0x0215, r24
			forward();
    158a:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(130,50);
    158e:	82 e8       	ldi	r24, 0x82	; 130
    1590:	62 e3       	ldi	r22, 0x32	; 50
    1592:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if((Right_white_line<0x10) && (flag==0))	//If Right WL is white and center is not black, turn left
    1596:	80 91 0a 02 	lds	r24, 0x020A
    159a:	80 31       	cpi	r24, 0x10	; 16
    159c:	68 f4       	brcc	.+26     	; 0x15b8 <B+0x638>
    159e:	80 91 15 02 	lds	r24, 0x0215
    15a2:	88 23       	and	r24, r24
    15a4:	49 f4       	brne	.+18     	; 0x15b8 <B+0x638>
		{
			flag=1;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	80 93 15 02 	sts	0x0215, r24
			forward();
    15ac:	0e 94 43 03 	call	0x686	; 0x686 <forward>
			velocity(50,130);
    15b0:	82 e3       	ldi	r24, 0x32	; 50
    15b2:	62 e8       	ldi	r22, 0x82	; 130
    15b4:	0e 94 84 04 	call	0x908	; 0x908 <velocity>
		}

		if(Center_white_line>0x10 && Left_white_line>0x10 && Right_white_line>0x10)	//Either one of the 3 WL sensors detect black line
    15b8:	80 91 0b 02 	lds	r24, 0x020B
    15bc:	81 31       	cpi	r24, 0x11	; 17
    15be:	08 f4       	brcc	.+2      	; 0x15c2 <B+0x642>
    15c0:	ac cf       	rjmp	.-168    	; 0x151a <B+0x59a>
    15c2:	80 91 0c 02 	lds	r24, 0x020C
    15c6:	81 31       	cpi	r24, 0x11	; 17
    15c8:	08 f4       	brcc	.+2      	; 0x15cc <B+0x64c>
    15ca:	a7 cf       	rjmp	.-178    	; 0x151a <B+0x59a>
    15cc:	80 91 0a 02 	lds	r24, 0x020A
    15d0:	81 31       	cpi	r24, 0x11	; 17
    15d2:	08 f4       	brcc	.+2      	; 0x15d6 <B+0x656>
    15d4:	a2 cf       	rjmp	.-188    	; 0x151a <B+0x59a>
		{
			soft_left_degrees(92);	//rotate bot left by 90 degrees
    15d6:	8c e5       	ldi	r24, 0x5C	; 92
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <soft_left_degrees>
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	9f ef       	ldi	r25, 0xFF	; 255
    15e2:	ac e2       	ldi	r26, 0x2C	; 44
    15e4:	81 50       	subi	r24, 0x01	; 1
    15e6:	90 40       	sbci	r25, 0x00	; 0
    15e8:	a0 40       	sbci	r26, 0x00	; 0
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <B+0x664>
    15ec:	00 c0       	rjmp	.+0      	; 0x15ee <B+0x66e>
    15ee:	00 00       	nop
			_delay_ms(1000);
			stop();
    15f0:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
    15f4:	8f ef       	ldi	r24, 0xFF	; 255
    15f6:	9f eb       	ldi	r25, 0xBF	; 191
    15f8:	a1 e2       	ldi	r26, 0x21	; 33
    15fa:	81 50       	subi	r24, 0x01	; 1
    15fc:	90 40       	sbci	r25, 0x00	; 0
    15fe:	a0 40       	sbci	r26, 0x00	; 0
    1600:	e1 f7       	brne	.-8      	; 0x15fa <B+0x67a>
    1602:	00 c0       	rjmp	.+0      	; 0x1604 <B+0x684>
    1604:	00 00       	nop
			_delay_ms(750);
			count++;	//increment checked room count
    1606:	80 91 13 02 	lds	r24, 0x0213
    160a:	8f 5f       	subi	r24, 0xFF	; 255
    160c:	80 93 13 02 	sts	0x0213, r24
			break;
		}	
	}	
}
    1610:	08 95       	ret

00001612 <main>:
*/
int main()
{
	
		//initializing the robot
		init_devices_1();
    1612:	0e 94 26 04 	call	0x84c	; 0x84c <init_devices_1>
		init_devices_2();
    1616:	0e 94 4a 04 	call	0x894	; 0x894 <init_devices_2>
		lcd_set_4bit();
    161a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_set_4bit>
		lcd_init();
    161e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <lcd_init>
		
		servo_1(0);//keep the servo at 0 degrees
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	0e 94 0d 04 	call	0x81a	; 0x81a <servo_1>
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	9f ef       	ldi	r25, 0xFF	; 255
    162c:	ac e2       	ldi	r26, 0x2C	; 44
    162e:	81 50       	subi	r24, 0x01	; 1
    1630:	90 40       	sbci	r25, 0x00	; 0
    1632:	a0 40       	sbci	r26, 0x00	; 0
    1634:	e1 f7       	brne	.-8      	; 0x162e <main+0x1c>
    1636:	00 c0       	rjmp	.+0      	; 0x1638 <main+0x26>
    1638:	00 00       	nop
		_delay_ms(1000);
		forward_mm(195);//move bot forward by 195mm
    163a:	83 ec       	ldi	r24, 0xC3	; 195
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <forward_mm>
		while(count<4)//count represents number of rooms checked, so it is executed while count is less than 4
    1642:	4d c0       	rjmp	.+154    	; 0x16de <main+0xcc>
		{
			
			forward_mm(270); //Moves robot forward 270mm
    1644:	8e e0       	ldi	r24, 0x0E	; 14
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <forward_mm>
			stop();
    164c:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
    1650:	8f ef       	ldi	r24, 0xFF	; 255
    1652:	9f eb       	ldi	r25, 0xBF	; 191
    1654:	a1 e2       	ldi	r26, 0x21	; 33
    1656:	81 50       	subi	r24, 0x01	; 1
    1658:	90 40       	sbci	r25, 0x00	; 0
    165a:	a0 40       	sbci	r26, 0x00	; 0
    165c:	e1 f7       	brne	.-8      	; 0x1656 <main+0x44>
    165e:	00 c0       	rjmp	.+0      	; 0x1660 <main+0x4e>
    1660:	00 00       	nop
			_delay_ms(750);
			
			
			sharp9=ADC_Conversion(9);
    1662:	89 e0       	ldi	r24, 0x09	; 9
    1664:	0e 94 55 04 	call	0x8aa	; 0x8aa <ADC_Conversion>
			sharp9=Sharp_GP2D12_estimation(sharp9);
    1668:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Sharp_GP2D12_estimation>
    166c:	90 93 12 02 	sts	0x0212, r25
    1670:	80 93 11 02 	sts	0x0211, r24
			
		
			//check if door is present
			if(sharp9>200)//door is present
    1674:	89 3c       	cpi	r24, 0xC9	; 201
    1676:	91 05       	cpc	r25, r1
    1678:	90 f0       	brcs	.+36     	; 0x169e <main+0x8c>
			{
				soft_left_degrees(90); //Rotate (soft turn) by 90 degrees
    167a:	8a e5       	ldi	r24, 0x5A	; 90
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <soft_left_degrees>
				stop();
    1682:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
    1686:	8f ef       	ldi	r24, 0xFF	; 255
    1688:	9f eb       	ldi	r25, 0xBF	; 191
    168a:	a1 e2       	ldi	r26, 0x21	; 33
    168c:	81 50       	subi	r24, 0x01	; 1
    168e:	90 40       	sbci	r25, 0x00	; 0
    1690:	a0 40       	sbci	r26, 0x00	; 0
    1692:	e1 f7       	brne	.-8      	; 0x168c <main+0x7a>
    1694:	00 c0       	rjmp	.+0      	; 0x1696 <main+0x84>
    1696:	00 00       	nop
				_delay_ms(750);
				A();//call function A
    1698:	0e 94 89 04 	call	0x912	; 0x912 <A>
    169c:	20 c0       	rjmp	.+64     	; 0x16de <main+0xcc>
			}			
						
			else//door not present
			{
				forward_mm(400); //Moves robot forward 400mm
    169e:	80 e9       	ldi	r24, 0x90	; 144
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <forward_mm>
				stop();
    16a6:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	9f eb       	ldi	r25, 0xBF	; 191
    16ae:	a1 e2       	ldi	r26, 0x21	; 33
    16b0:	81 50       	subi	r24, 0x01	; 1
    16b2:	90 40       	sbci	r25, 0x00	; 0
    16b4:	a0 40       	sbci	r26, 0x00	; 0
    16b6:	e1 f7       	brne	.-8      	; 0x16b0 <main+0x9e>
    16b8:	00 c0       	rjmp	.+0      	; 0x16ba <main+0xa8>
    16ba:	00 00       	nop
				_delay_ms(750);	
				soft_left_degrees(90); //Rotate (soft turn) by 90 degrees
    16bc:	8a e5       	ldi	r24, 0x5A	; 90
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <soft_left_degrees>
				stop();
    16c4:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	9f eb       	ldi	r25, 0xBF	; 191
    16cc:	a1 e2       	ldi	r26, 0x21	; 33
    16ce:	81 50       	subi	r24, 0x01	; 1
    16d0:	90 40       	sbci	r25, 0x00	; 0
    16d2:	a0 40       	sbci	r26, 0x00	; 0
    16d4:	e1 f7       	brne	.-8      	; 0x16ce <main+0xbc>
    16d6:	00 c0       	rjmp	.+0      	; 0x16d8 <main+0xc6>
    16d8:	00 00       	nop
				_delay_ms(750);	
				B();//call function b
    16da:	0e 94 c0 07 	call	0xf80	; 0xf80 <B>
		lcd_init();
		
		servo_1(0);//keep the servo at 0 degrees
		_delay_ms(1000);
		forward_mm(195);//move bot forward by 195mm
		while(count<4)//count represents number of rooms checked, so it is executed while count is less than 4
    16de:	80 91 13 02 	lds	r24, 0x0213
    16e2:	84 30       	cpi	r24, 0x04	; 4
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <main+0xd6>
    16e6:	ae cf       	rjmp	.-164    	; 0x1644 <main+0x32>
				stop();
				_delay_ms(750);	
				B();//call function b
			}
		}
		stop();
    16e8:	0e 94 57 03 	call	0x6ae	; 0x6ae <stop>
    16ec:	8f ef       	ldi	r24, 0xFF	; 255
    16ee:	9f ef       	ldi	r25, 0xFF	; 255
    16f0:	ac e2       	ldi	r26, 0x2C	; 44
    16f2:	81 50       	subi	r24, 0x01	; 1
    16f4:	90 40       	sbci	r25, 0x00	; 0
    16f6:	a0 40       	sbci	r26, 0x00	; 0
    16f8:	e1 f7       	brne	.-8      	; 0x16f2 <main+0xe0>
    16fa:	00 c0       	rjmp	.+0      	; 0x16fc <main+0xea>
    16fc:	00 00       	nop
		_delay_ms(1000);
		//sound the buzzer for 6 seconds to indicate completion of the task
		DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    16fe:	3b 9a       	sbi	0x07, 3	; 7
		PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    1700:	43 98       	cbi	0x08, 3	; 8
		unsigned char port_restore = 0;
		port_restore = PINC;
    1702:	86 b1       	in	r24, 0x06	; 6
		port_restore = port_restore | 0x08;
    1704:	88 60       	ori	r24, 0x08	; 8
		PORTC = port_restore;
    1706:	88 b9       	out	0x08, r24	; 8
    1708:	8f ef       	ldi	r24, 0xFF	; 255
    170a:	9f ef       	ldi	r25, 0xFF	; 255
    170c:	a0 ee       	ldi	r26, 0xE0	; 224
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	81 50       	subi	r24, 0x01	; 1
    1712:	90 40       	sbci	r25, 0x00	; 0
    1714:	a0 40       	sbci	r26, 0x00	; 0
    1716:	b0 40       	sbci	r27, 0x00	; 0
    1718:	d9 f7       	brne	.-10     	; 0x1710 <main+0xfe>
    171a:	00 c0       	rjmp	.+0      	; 0x171c <main+0x10a>
    171c:	00 00       	nop
		_delay_ms(6000);		//delay
		//switch off buzzer
		port_restore = PINC;
    171e:	86 b1       	in	r24, 0x06	; 6
		port_restore = port_restore & 0xF7;
    1720:	87 7f       	andi	r24, 0xF7	; 247
		PORTC = port_restore;
    1722:	88 b9       	out	0x08, r24	; 8
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	9f ef       	ldi	r25, 0xFF	; 255
    1728:	a0 ee       	ldi	r26, 0xE0	; 224
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	81 50       	subi	r24, 0x01	; 1
    172e:	90 40       	sbci	r25, 0x00	; 0
    1730:	a0 40       	sbci	r26, 0x00	; 0
    1732:	b0 40       	sbci	r27, 0x00	; 0
    1734:	d9 f7       	brne	.-10     	; 0x172c <main+0x11a>
    1736:	00 c0       	rjmp	.+0      	; 0x1738 <main+0x126>
    1738:	00 00       	nop
		_delay_ms(6000);		//delay
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	08 95       	ret

00001740 <__subsf3>:
    1740:	50 58       	subi	r21, 0x80	; 128

00001742 <__addsf3>:
    1742:	bb 27       	eor	r27, r27
    1744:	aa 27       	eor	r26, r26
    1746:	0e d0       	rcall	.+28     	; 0x1764 <__addsf3x>
    1748:	4d c1       	rjmp	.+666    	; 0x19e4 <__fp_round>
    174a:	3e d1       	rcall	.+636    	; 0x19c8 <__fp_pscA>
    174c:	30 f0       	brcs	.+12     	; 0x175a <__addsf3+0x18>
    174e:	43 d1       	rcall	.+646    	; 0x19d6 <__fp_pscB>
    1750:	20 f0       	brcs	.+8      	; 0x175a <__addsf3+0x18>
    1752:	31 f4       	brne	.+12     	; 0x1760 <__addsf3+0x1e>
    1754:	9f 3f       	cpi	r25, 0xFF	; 255
    1756:	11 f4       	brne	.+4      	; 0x175c <__addsf3+0x1a>
    1758:	1e f4       	brtc	.+6      	; 0x1760 <__addsf3+0x1e>
    175a:	33 c1       	rjmp	.+614    	; 0x19c2 <__fp_nan>
    175c:	0e f4       	brtc	.+2      	; 0x1760 <__addsf3+0x1e>
    175e:	e0 95       	com	r30
    1760:	e7 fb       	bst	r30, 7
    1762:	29 c1       	rjmp	.+594    	; 0x19b6 <__fp_inf>

00001764 <__addsf3x>:
    1764:	e9 2f       	mov	r30, r25
    1766:	4f d1       	rcall	.+670    	; 0x1a06 <__fp_split3>
    1768:	80 f3       	brcs	.-32     	; 0x174a <__addsf3+0x8>
    176a:	ba 17       	cp	r27, r26
    176c:	62 07       	cpc	r22, r18
    176e:	73 07       	cpc	r23, r19
    1770:	84 07       	cpc	r24, r20
    1772:	95 07       	cpc	r25, r21
    1774:	18 f0       	brcs	.+6      	; 0x177c <__addsf3x+0x18>
    1776:	71 f4       	brne	.+28     	; 0x1794 <__addsf3x+0x30>
    1778:	9e f5       	brtc	.+102    	; 0x17e0 <__addsf3x+0x7c>
    177a:	67 c1       	rjmp	.+718    	; 0x1a4a <__fp_zero>
    177c:	0e f4       	brtc	.+2      	; 0x1780 <__addsf3x+0x1c>
    177e:	e0 95       	com	r30
    1780:	0b 2e       	mov	r0, r27
    1782:	ba 2f       	mov	r27, r26
    1784:	a0 2d       	mov	r26, r0
    1786:	0b 01       	movw	r0, r22
    1788:	b9 01       	movw	r22, r18
    178a:	90 01       	movw	r18, r0
    178c:	0c 01       	movw	r0, r24
    178e:	ca 01       	movw	r24, r20
    1790:	a0 01       	movw	r20, r0
    1792:	11 24       	eor	r1, r1
    1794:	ff 27       	eor	r31, r31
    1796:	59 1b       	sub	r21, r25
    1798:	99 f0       	breq	.+38     	; 0x17c0 <__addsf3x+0x5c>
    179a:	59 3f       	cpi	r21, 0xF9	; 249
    179c:	50 f4       	brcc	.+20     	; 0x17b2 <__addsf3x+0x4e>
    179e:	50 3e       	cpi	r21, 0xE0	; 224
    17a0:	68 f1       	brcs	.+90     	; 0x17fc <__addsf3x+0x98>
    17a2:	1a 16       	cp	r1, r26
    17a4:	f0 40       	sbci	r31, 0x00	; 0
    17a6:	a2 2f       	mov	r26, r18
    17a8:	23 2f       	mov	r18, r19
    17aa:	34 2f       	mov	r19, r20
    17ac:	44 27       	eor	r20, r20
    17ae:	58 5f       	subi	r21, 0xF8	; 248
    17b0:	f3 cf       	rjmp	.-26     	; 0x1798 <__addsf3x+0x34>
    17b2:	46 95       	lsr	r20
    17b4:	37 95       	ror	r19
    17b6:	27 95       	ror	r18
    17b8:	a7 95       	ror	r26
    17ba:	f0 40       	sbci	r31, 0x00	; 0
    17bc:	53 95       	inc	r21
    17be:	c9 f7       	brne	.-14     	; 0x17b2 <__addsf3x+0x4e>
    17c0:	7e f4       	brtc	.+30     	; 0x17e0 <__addsf3x+0x7c>
    17c2:	1f 16       	cp	r1, r31
    17c4:	ba 0b       	sbc	r27, r26
    17c6:	62 0b       	sbc	r22, r18
    17c8:	73 0b       	sbc	r23, r19
    17ca:	84 0b       	sbc	r24, r20
    17cc:	ba f0       	brmi	.+46     	; 0x17fc <__addsf3x+0x98>
    17ce:	91 50       	subi	r25, 0x01	; 1
    17d0:	a1 f0       	breq	.+40     	; 0x17fa <__addsf3x+0x96>
    17d2:	ff 0f       	add	r31, r31
    17d4:	bb 1f       	adc	r27, r27
    17d6:	66 1f       	adc	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	88 1f       	adc	r24, r24
    17dc:	c2 f7       	brpl	.-16     	; 0x17ce <__addsf3x+0x6a>
    17de:	0e c0       	rjmp	.+28     	; 0x17fc <__addsf3x+0x98>
    17e0:	ba 0f       	add	r27, r26
    17e2:	62 1f       	adc	r22, r18
    17e4:	73 1f       	adc	r23, r19
    17e6:	84 1f       	adc	r24, r20
    17e8:	48 f4       	brcc	.+18     	; 0x17fc <__addsf3x+0x98>
    17ea:	87 95       	ror	r24
    17ec:	77 95       	ror	r23
    17ee:	67 95       	ror	r22
    17f0:	b7 95       	ror	r27
    17f2:	f7 95       	ror	r31
    17f4:	9e 3f       	cpi	r25, 0xFE	; 254
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <__addsf3x+0x96>
    17f8:	b3 cf       	rjmp	.-154    	; 0x1760 <__addsf3+0x1e>
    17fa:	93 95       	inc	r25
    17fc:	88 0f       	add	r24, r24
    17fe:	08 f0       	brcs	.+2      	; 0x1802 <__addsf3x+0x9e>
    1800:	99 27       	eor	r25, r25
    1802:	ee 0f       	add	r30, r30
    1804:	97 95       	ror	r25
    1806:	87 95       	ror	r24
    1808:	08 95       	ret

0000180a <__divsf3>:
    180a:	0c d0       	rcall	.+24     	; 0x1824 <__divsf3x>
    180c:	eb c0       	rjmp	.+470    	; 0x19e4 <__fp_round>
    180e:	e3 d0       	rcall	.+454    	; 0x19d6 <__fp_pscB>
    1810:	40 f0       	brcs	.+16     	; 0x1822 <__divsf3+0x18>
    1812:	da d0       	rcall	.+436    	; 0x19c8 <__fp_pscA>
    1814:	30 f0       	brcs	.+12     	; 0x1822 <__divsf3+0x18>
    1816:	21 f4       	brne	.+8      	; 0x1820 <__divsf3+0x16>
    1818:	5f 3f       	cpi	r21, 0xFF	; 255
    181a:	19 f0       	breq	.+6      	; 0x1822 <__divsf3+0x18>
    181c:	cc c0       	rjmp	.+408    	; 0x19b6 <__fp_inf>
    181e:	51 11       	cpse	r21, r1
    1820:	15 c1       	rjmp	.+554    	; 0x1a4c <__fp_szero>
    1822:	cf c0       	rjmp	.+414    	; 0x19c2 <__fp_nan>

00001824 <__divsf3x>:
    1824:	f0 d0       	rcall	.+480    	; 0x1a06 <__fp_split3>
    1826:	98 f3       	brcs	.-26     	; 0x180e <__divsf3+0x4>

00001828 <__divsf3_pse>:
    1828:	99 23       	and	r25, r25
    182a:	c9 f3       	breq	.-14     	; 0x181e <__divsf3+0x14>
    182c:	55 23       	and	r21, r21
    182e:	b1 f3       	breq	.-20     	; 0x181c <__divsf3+0x12>
    1830:	95 1b       	sub	r25, r21
    1832:	55 0b       	sbc	r21, r21
    1834:	bb 27       	eor	r27, r27
    1836:	aa 27       	eor	r26, r26
    1838:	62 17       	cp	r22, r18
    183a:	73 07       	cpc	r23, r19
    183c:	84 07       	cpc	r24, r20
    183e:	38 f0       	brcs	.+14     	; 0x184e <__divsf3_pse+0x26>
    1840:	9f 5f       	subi	r25, 0xFF	; 255
    1842:	5f 4f       	sbci	r21, 0xFF	; 255
    1844:	22 0f       	add	r18, r18
    1846:	33 1f       	adc	r19, r19
    1848:	44 1f       	adc	r20, r20
    184a:	aa 1f       	adc	r26, r26
    184c:	a9 f3       	breq	.-22     	; 0x1838 <__divsf3_pse+0x10>
    184e:	33 d0       	rcall	.+102    	; 0x18b6 <__divsf3_pse+0x8e>
    1850:	0e 2e       	mov	r0, r30
    1852:	3a f0       	brmi	.+14     	; 0x1862 <__divsf3_pse+0x3a>
    1854:	e0 e8       	ldi	r30, 0x80	; 128
    1856:	30 d0       	rcall	.+96     	; 0x18b8 <__divsf3_pse+0x90>
    1858:	91 50       	subi	r25, 0x01	; 1
    185a:	50 40       	sbci	r21, 0x00	; 0
    185c:	e6 95       	lsr	r30
    185e:	00 1c       	adc	r0, r0
    1860:	ca f7       	brpl	.-14     	; 0x1854 <__divsf3_pse+0x2c>
    1862:	29 d0       	rcall	.+82     	; 0x18b6 <__divsf3_pse+0x8e>
    1864:	fe 2f       	mov	r31, r30
    1866:	27 d0       	rcall	.+78     	; 0x18b6 <__divsf3_pse+0x8e>
    1868:	66 0f       	add	r22, r22
    186a:	77 1f       	adc	r23, r23
    186c:	88 1f       	adc	r24, r24
    186e:	bb 1f       	adc	r27, r27
    1870:	26 17       	cp	r18, r22
    1872:	37 07       	cpc	r19, r23
    1874:	48 07       	cpc	r20, r24
    1876:	ab 07       	cpc	r26, r27
    1878:	b0 e8       	ldi	r27, 0x80	; 128
    187a:	09 f0       	breq	.+2      	; 0x187e <__divsf3_pse+0x56>
    187c:	bb 0b       	sbc	r27, r27
    187e:	80 2d       	mov	r24, r0
    1880:	bf 01       	movw	r22, r30
    1882:	ff 27       	eor	r31, r31
    1884:	93 58       	subi	r25, 0x83	; 131
    1886:	5f 4f       	sbci	r21, 0xFF	; 255
    1888:	2a f0       	brmi	.+10     	; 0x1894 <__divsf3_pse+0x6c>
    188a:	9e 3f       	cpi	r25, 0xFE	; 254
    188c:	51 05       	cpc	r21, r1
    188e:	68 f0       	brcs	.+26     	; 0x18aa <__divsf3_pse+0x82>
    1890:	92 c0       	rjmp	.+292    	; 0x19b6 <__fp_inf>
    1892:	dc c0       	rjmp	.+440    	; 0x1a4c <__fp_szero>
    1894:	5f 3f       	cpi	r21, 0xFF	; 255
    1896:	ec f3       	brlt	.-6      	; 0x1892 <__divsf3_pse+0x6a>
    1898:	98 3e       	cpi	r25, 0xE8	; 232
    189a:	dc f3       	brlt	.-10     	; 0x1892 <__divsf3_pse+0x6a>
    189c:	86 95       	lsr	r24
    189e:	77 95       	ror	r23
    18a0:	67 95       	ror	r22
    18a2:	b7 95       	ror	r27
    18a4:	f7 95       	ror	r31
    18a6:	9f 5f       	subi	r25, 0xFF	; 255
    18a8:	c9 f7       	brne	.-14     	; 0x189c <__divsf3_pse+0x74>
    18aa:	88 0f       	add	r24, r24
    18ac:	91 1d       	adc	r25, r1
    18ae:	96 95       	lsr	r25
    18b0:	87 95       	ror	r24
    18b2:	97 f9       	bld	r25, 7
    18b4:	08 95       	ret
    18b6:	e1 e0       	ldi	r30, 0x01	; 1
    18b8:	66 0f       	add	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	88 1f       	adc	r24, r24
    18be:	bb 1f       	adc	r27, r27
    18c0:	62 17       	cp	r22, r18
    18c2:	73 07       	cpc	r23, r19
    18c4:	84 07       	cpc	r24, r20
    18c6:	ba 07       	cpc	r27, r26
    18c8:	20 f0       	brcs	.+8      	; 0x18d2 <__divsf3_pse+0xaa>
    18ca:	62 1b       	sub	r22, r18
    18cc:	73 0b       	sbc	r23, r19
    18ce:	84 0b       	sbc	r24, r20
    18d0:	ba 0b       	sbc	r27, r26
    18d2:	ee 1f       	adc	r30, r30
    18d4:	88 f7       	brcc	.-30     	; 0x18b8 <__divsf3_pse+0x90>
    18d6:	e0 95       	com	r30
    18d8:	08 95       	ret

000018da <__fixsfsi>:
    18da:	04 d0       	rcall	.+8      	; 0x18e4 <__fixunssfsi>
    18dc:	68 94       	set
    18de:	b1 11       	cpse	r27, r1
    18e0:	b5 c0       	rjmp	.+362    	; 0x1a4c <__fp_szero>
    18e2:	08 95       	ret

000018e4 <__fixunssfsi>:
    18e4:	98 d0       	rcall	.+304    	; 0x1a16 <__fp_splitA>
    18e6:	88 f0       	brcs	.+34     	; 0x190a <__fixunssfsi+0x26>
    18e8:	9f 57       	subi	r25, 0x7F	; 127
    18ea:	90 f0       	brcs	.+36     	; 0x1910 <__fixunssfsi+0x2c>
    18ec:	b9 2f       	mov	r27, r25
    18ee:	99 27       	eor	r25, r25
    18f0:	b7 51       	subi	r27, 0x17	; 23
    18f2:	a0 f0       	brcs	.+40     	; 0x191c <__fixunssfsi+0x38>
    18f4:	d1 f0       	breq	.+52     	; 0x192a <__fixunssfsi+0x46>
    18f6:	66 0f       	add	r22, r22
    18f8:	77 1f       	adc	r23, r23
    18fa:	88 1f       	adc	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	1a f0       	brmi	.+6      	; 0x1906 <__fixunssfsi+0x22>
    1900:	ba 95       	dec	r27
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <__fixunssfsi+0x12>
    1904:	12 c0       	rjmp	.+36     	; 0x192a <__fixunssfsi+0x46>
    1906:	b1 30       	cpi	r27, 0x01	; 1
    1908:	81 f0       	breq	.+32     	; 0x192a <__fixunssfsi+0x46>
    190a:	9f d0       	rcall	.+318    	; 0x1a4a <__fp_zero>
    190c:	b1 e0       	ldi	r27, 0x01	; 1
    190e:	08 95       	ret
    1910:	9c c0       	rjmp	.+312    	; 0x1a4a <__fp_zero>
    1912:	67 2f       	mov	r22, r23
    1914:	78 2f       	mov	r23, r24
    1916:	88 27       	eor	r24, r24
    1918:	b8 5f       	subi	r27, 0xF8	; 248
    191a:	39 f0       	breq	.+14     	; 0x192a <__fixunssfsi+0x46>
    191c:	b9 3f       	cpi	r27, 0xF9	; 249
    191e:	cc f3       	brlt	.-14     	; 0x1912 <__fixunssfsi+0x2e>
    1920:	86 95       	lsr	r24
    1922:	77 95       	ror	r23
    1924:	67 95       	ror	r22
    1926:	b3 95       	inc	r27
    1928:	d9 f7       	brne	.-10     	; 0x1920 <__fixunssfsi+0x3c>
    192a:	3e f4       	brtc	.+14     	; 0x193a <__fixunssfsi+0x56>
    192c:	90 95       	com	r25
    192e:	80 95       	com	r24
    1930:	70 95       	com	r23
    1932:	61 95       	neg	r22
    1934:	7f 4f       	sbci	r23, 0xFF	; 255
    1936:	8f 4f       	sbci	r24, 0xFF	; 255
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	08 95       	ret

0000193c <__floatunsisf>:
    193c:	e8 94       	clt
    193e:	09 c0       	rjmp	.+18     	; 0x1952 <__floatsisf+0x12>

00001940 <__floatsisf>:
    1940:	97 fb       	bst	r25, 7
    1942:	3e f4       	brtc	.+14     	; 0x1952 <__floatsisf+0x12>
    1944:	90 95       	com	r25
    1946:	80 95       	com	r24
    1948:	70 95       	com	r23
    194a:	61 95       	neg	r22
    194c:	7f 4f       	sbci	r23, 0xFF	; 255
    194e:	8f 4f       	sbci	r24, 0xFF	; 255
    1950:	9f 4f       	sbci	r25, 0xFF	; 255
    1952:	99 23       	and	r25, r25
    1954:	a9 f0       	breq	.+42     	; 0x1980 <__floatsisf+0x40>
    1956:	f9 2f       	mov	r31, r25
    1958:	96 e9       	ldi	r25, 0x96	; 150
    195a:	bb 27       	eor	r27, r27
    195c:	93 95       	inc	r25
    195e:	f6 95       	lsr	r31
    1960:	87 95       	ror	r24
    1962:	77 95       	ror	r23
    1964:	67 95       	ror	r22
    1966:	b7 95       	ror	r27
    1968:	f1 11       	cpse	r31, r1
    196a:	f8 cf       	rjmp	.-16     	; 0x195c <__floatsisf+0x1c>
    196c:	fa f4       	brpl	.+62     	; 0x19ac <__floatsisf+0x6c>
    196e:	bb 0f       	add	r27, r27
    1970:	11 f4       	brne	.+4      	; 0x1976 <__floatsisf+0x36>
    1972:	60 ff       	sbrs	r22, 0
    1974:	1b c0       	rjmp	.+54     	; 0x19ac <__floatsisf+0x6c>
    1976:	6f 5f       	subi	r22, 0xFF	; 255
    1978:	7f 4f       	sbci	r23, 0xFF	; 255
    197a:	8f 4f       	sbci	r24, 0xFF	; 255
    197c:	9f 4f       	sbci	r25, 0xFF	; 255
    197e:	16 c0       	rjmp	.+44     	; 0x19ac <__floatsisf+0x6c>
    1980:	88 23       	and	r24, r24
    1982:	11 f0       	breq	.+4      	; 0x1988 <__floatsisf+0x48>
    1984:	96 e9       	ldi	r25, 0x96	; 150
    1986:	11 c0       	rjmp	.+34     	; 0x19aa <__floatsisf+0x6a>
    1988:	77 23       	and	r23, r23
    198a:	21 f0       	breq	.+8      	; 0x1994 <__floatsisf+0x54>
    198c:	9e e8       	ldi	r25, 0x8E	; 142
    198e:	87 2f       	mov	r24, r23
    1990:	76 2f       	mov	r23, r22
    1992:	05 c0       	rjmp	.+10     	; 0x199e <__floatsisf+0x5e>
    1994:	66 23       	and	r22, r22
    1996:	71 f0       	breq	.+28     	; 0x19b4 <__floatsisf+0x74>
    1998:	96 e8       	ldi	r25, 0x86	; 134
    199a:	86 2f       	mov	r24, r22
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	2a f0       	brmi	.+10     	; 0x19ac <__floatsisf+0x6c>
    19a2:	9a 95       	dec	r25
    19a4:	66 0f       	add	r22, r22
    19a6:	77 1f       	adc	r23, r23
    19a8:	88 1f       	adc	r24, r24
    19aa:	da f7       	brpl	.-10     	; 0x19a2 <__floatsisf+0x62>
    19ac:	88 0f       	add	r24, r24
    19ae:	96 95       	lsr	r25
    19b0:	87 95       	ror	r24
    19b2:	97 f9       	bld	r25, 7
    19b4:	08 95       	ret

000019b6 <__fp_inf>:
    19b6:	97 f9       	bld	r25, 7
    19b8:	9f 67       	ori	r25, 0x7F	; 127
    19ba:	80 e8       	ldi	r24, 0x80	; 128
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	08 95       	ret

000019c2 <__fp_nan>:
    19c2:	9f ef       	ldi	r25, 0xFF	; 255
    19c4:	80 ec       	ldi	r24, 0xC0	; 192
    19c6:	08 95       	ret

000019c8 <__fp_pscA>:
    19c8:	00 24       	eor	r0, r0
    19ca:	0a 94       	dec	r0
    19cc:	16 16       	cp	r1, r22
    19ce:	17 06       	cpc	r1, r23
    19d0:	18 06       	cpc	r1, r24
    19d2:	09 06       	cpc	r0, r25
    19d4:	08 95       	ret

000019d6 <__fp_pscB>:
    19d6:	00 24       	eor	r0, r0
    19d8:	0a 94       	dec	r0
    19da:	12 16       	cp	r1, r18
    19dc:	13 06       	cpc	r1, r19
    19de:	14 06       	cpc	r1, r20
    19e0:	05 06       	cpc	r0, r21
    19e2:	08 95       	ret

000019e4 <__fp_round>:
    19e4:	09 2e       	mov	r0, r25
    19e6:	03 94       	inc	r0
    19e8:	00 0c       	add	r0, r0
    19ea:	11 f4       	brne	.+4      	; 0x19f0 <__fp_round+0xc>
    19ec:	88 23       	and	r24, r24
    19ee:	52 f0       	brmi	.+20     	; 0x1a04 <__fp_round+0x20>
    19f0:	bb 0f       	add	r27, r27
    19f2:	40 f4       	brcc	.+16     	; 0x1a04 <__fp_round+0x20>
    19f4:	bf 2b       	or	r27, r31
    19f6:	11 f4       	brne	.+4      	; 0x19fc <__fp_round+0x18>
    19f8:	60 ff       	sbrs	r22, 0
    19fa:	04 c0       	rjmp	.+8      	; 0x1a04 <__fp_round+0x20>
    19fc:	6f 5f       	subi	r22, 0xFF	; 255
    19fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1a00:	8f 4f       	sbci	r24, 0xFF	; 255
    1a02:	9f 4f       	sbci	r25, 0xFF	; 255
    1a04:	08 95       	ret

00001a06 <__fp_split3>:
    1a06:	57 fd       	sbrc	r21, 7
    1a08:	90 58       	subi	r25, 0x80	; 128
    1a0a:	44 0f       	add	r20, r20
    1a0c:	55 1f       	adc	r21, r21
    1a0e:	59 f0       	breq	.+22     	; 0x1a26 <__fp_splitA+0x10>
    1a10:	5f 3f       	cpi	r21, 0xFF	; 255
    1a12:	71 f0       	breq	.+28     	; 0x1a30 <__fp_splitA+0x1a>
    1a14:	47 95       	ror	r20

00001a16 <__fp_splitA>:
    1a16:	88 0f       	add	r24, r24
    1a18:	97 fb       	bst	r25, 7
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	61 f0       	breq	.+24     	; 0x1a36 <__fp_splitA+0x20>
    1a1e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a20:	79 f0       	breq	.+30     	; 0x1a40 <__fp_splitA+0x2a>
    1a22:	87 95       	ror	r24
    1a24:	08 95       	ret
    1a26:	12 16       	cp	r1, r18
    1a28:	13 06       	cpc	r1, r19
    1a2a:	14 06       	cpc	r1, r20
    1a2c:	55 1f       	adc	r21, r21
    1a2e:	f2 cf       	rjmp	.-28     	; 0x1a14 <__fp_split3+0xe>
    1a30:	46 95       	lsr	r20
    1a32:	f1 df       	rcall	.-30     	; 0x1a16 <__fp_splitA>
    1a34:	08 c0       	rjmp	.+16     	; 0x1a46 <__fp_splitA+0x30>
    1a36:	16 16       	cp	r1, r22
    1a38:	17 06       	cpc	r1, r23
    1a3a:	18 06       	cpc	r1, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	f1 cf       	rjmp	.-30     	; 0x1a22 <__fp_splitA+0xc>
    1a40:	86 95       	lsr	r24
    1a42:	71 05       	cpc	r23, r1
    1a44:	61 05       	cpc	r22, r1
    1a46:	08 94       	sec
    1a48:	08 95       	ret

00001a4a <__fp_zero>:
    1a4a:	e8 94       	clt

00001a4c <__fp_szero>:
    1a4c:	bb 27       	eor	r27, r27
    1a4e:	66 27       	eor	r22, r22
    1a50:	77 27       	eor	r23, r23
    1a52:	cb 01       	movw	r24, r22
    1a54:	97 f9       	bld	r25, 7
    1a56:	08 95       	ret

00001a58 <__mulsf3>:
    1a58:	0b d0       	rcall	.+22     	; 0x1a70 <__mulsf3x>
    1a5a:	c4 cf       	rjmp	.-120    	; 0x19e4 <__fp_round>
    1a5c:	b5 df       	rcall	.-150    	; 0x19c8 <__fp_pscA>
    1a5e:	28 f0       	brcs	.+10     	; 0x1a6a <__mulsf3+0x12>
    1a60:	ba df       	rcall	.-140    	; 0x19d6 <__fp_pscB>
    1a62:	18 f0       	brcs	.+6      	; 0x1a6a <__mulsf3+0x12>
    1a64:	95 23       	and	r25, r21
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <__mulsf3+0x12>
    1a68:	a6 cf       	rjmp	.-180    	; 0x19b6 <__fp_inf>
    1a6a:	ab cf       	rjmp	.-170    	; 0x19c2 <__fp_nan>
    1a6c:	11 24       	eor	r1, r1
    1a6e:	ee cf       	rjmp	.-36     	; 0x1a4c <__fp_szero>

00001a70 <__mulsf3x>:
    1a70:	ca df       	rcall	.-108    	; 0x1a06 <__fp_split3>
    1a72:	a0 f3       	brcs	.-24     	; 0x1a5c <__mulsf3+0x4>

00001a74 <__mulsf3_pse>:
    1a74:	95 9f       	mul	r25, r21
    1a76:	d1 f3       	breq	.-12     	; 0x1a6c <__mulsf3+0x14>
    1a78:	95 0f       	add	r25, r21
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	55 1f       	adc	r21, r21
    1a7e:	62 9f       	mul	r22, r18
    1a80:	f0 01       	movw	r30, r0
    1a82:	72 9f       	mul	r23, r18
    1a84:	bb 27       	eor	r27, r27
    1a86:	f0 0d       	add	r31, r0
    1a88:	b1 1d       	adc	r27, r1
    1a8a:	63 9f       	mul	r22, r19
    1a8c:	aa 27       	eor	r26, r26
    1a8e:	f0 0d       	add	r31, r0
    1a90:	b1 1d       	adc	r27, r1
    1a92:	aa 1f       	adc	r26, r26
    1a94:	64 9f       	mul	r22, r20
    1a96:	66 27       	eor	r22, r22
    1a98:	b0 0d       	add	r27, r0
    1a9a:	a1 1d       	adc	r26, r1
    1a9c:	66 1f       	adc	r22, r22
    1a9e:	82 9f       	mul	r24, r18
    1aa0:	22 27       	eor	r18, r18
    1aa2:	b0 0d       	add	r27, r0
    1aa4:	a1 1d       	adc	r26, r1
    1aa6:	62 1f       	adc	r22, r18
    1aa8:	73 9f       	mul	r23, r19
    1aaa:	b0 0d       	add	r27, r0
    1aac:	a1 1d       	adc	r26, r1
    1aae:	62 1f       	adc	r22, r18
    1ab0:	83 9f       	mul	r24, r19
    1ab2:	a0 0d       	add	r26, r0
    1ab4:	61 1d       	adc	r22, r1
    1ab6:	22 1f       	adc	r18, r18
    1ab8:	74 9f       	mul	r23, r20
    1aba:	33 27       	eor	r19, r19
    1abc:	a0 0d       	add	r26, r0
    1abe:	61 1d       	adc	r22, r1
    1ac0:	23 1f       	adc	r18, r19
    1ac2:	84 9f       	mul	r24, r20
    1ac4:	60 0d       	add	r22, r0
    1ac6:	21 1d       	adc	r18, r1
    1ac8:	82 2f       	mov	r24, r18
    1aca:	76 2f       	mov	r23, r22
    1acc:	6a 2f       	mov	r22, r26
    1ace:	11 24       	eor	r1, r1
    1ad0:	9f 57       	subi	r25, 0x7F	; 127
    1ad2:	50 40       	sbci	r21, 0x00	; 0
    1ad4:	8a f0       	brmi	.+34     	; 0x1af8 <__mulsf3_pse+0x84>
    1ad6:	e1 f0       	breq	.+56     	; 0x1b10 <__mulsf3_pse+0x9c>
    1ad8:	88 23       	and	r24, r24
    1ada:	4a f0       	brmi	.+18     	; 0x1aee <__mulsf3_pse+0x7a>
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	bb 1f       	adc	r27, r27
    1ae2:	66 1f       	adc	r22, r22
    1ae4:	77 1f       	adc	r23, r23
    1ae6:	88 1f       	adc	r24, r24
    1ae8:	91 50       	subi	r25, 0x01	; 1
    1aea:	50 40       	sbci	r21, 0x00	; 0
    1aec:	a9 f7       	brne	.-22     	; 0x1ad8 <__mulsf3_pse+0x64>
    1aee:	9e 3f       	cpi	r25, 0xFE	; 254
    1af0:	51 05       	cpc	r21, r1
    1af2:	70 f0       	brcs	.+28     	; 0x1b10 <__mulsf3_pse+0x9c>
    1af4:	60 cf       	rjmp	.-320    	; 0x19b6 <__fp_inf>
    1af6:	aa cf       	rjmp	.-172    	; 0x1a4c <__fp_szero>
    1af8:	5f 3f       	cpi	r21, 0xFF	; 255
    1afa:	ec f3       	brlt	.-6      	; 0x1af6 <__mulsf3_pse+0x82>
    1afc:	98 3e       	cpi	r25, 0xE8	; 232
    1afe:	dc f3       	brlt	.-10     	; 0x1af6 <__mulsf3_pse+0x82>
    1b00:	86 95       	lsr	r24
    1b02:	77 95       	ror	r23
    1b04:	67 95       	ror	r22
    1b06:	b7 95       	ror	r27
    1b08:	f7 95       	ror	r31
    1b0a:	e7 95       	ror	r30
    1b0c:	9f 5f       	subi	r25, 0xFF	; 255
    1b0e:	c1 f7       	brne	.-16     	; 0x1b00 <__mulsf3_pse+0x8c>
    1b10:	fe 2b       	or	r31, r30
    1b12:	88 0f       	add	r24, r24
    1b14:	91 1d       	adc	r25, r1
    1b16:	96 95       	lsr	r25
    1b18:	87 95       	ror	r24
    1b1a:	97 f9       	bld	r25, 7
    1b1c:	08 95       	ret

00001b1e <pow>:
    1b1e:	fa 01       	movw	r30, r20
    1b20:	ee 0f       	add	r30, r30
    1b22:	ff 1f       	adc	r31, r31
    1b24:	30 96       	adiw	r30, 0x00	; 0
    1b26:	21 05       	cpc	r18, r1
    1b28:	31 05       	cpc	r19, r1
    1b2a:	99 f1       	breq	.+102    	; 0x1b92 <pow+0x74>
    1b2c:	61 15       	cp	r22, r1
    1b2e:	71 05       	cpc	r23, r1
    1b30:	61 f4       	brne	.+24     	; 0x1b4a <pow+0x2c>
    1b32:	80 38       	cpi	r24, 0x80	; 128
    1b34:	bf e3       	ldi	r27, 0x3F	; 63
    1b36:	9b 07       	cpc	r25, r27
    1b38:	49 f1       	breq	.+82     	; 0x1b8c <pow+0x6e>
    1b3a:	68 94       	set
    1b3c:	90 38       	cpi	r25, 0x80	; 128
    1b3e:	81 05       	cpc	r24, r1
    1b40:	61 f0       	breq	.+24     	; 0x1b5a <pow+0x3c>
    1b42:	80 38       	cpi	r24, 0x80	; 128
    1b44:	bf ef       	ldi	r27, 0xFF	; 255
    1b46:	9b 07       	cpc	r25, r27
    1b48:	41 f0       	breq	.+16     	; 0x1b5a <pow+0x3c>
    1b4a:	99 23       	and	r25, r25
    1b4c:	42 f5       	brpl	.+80     	; 0x1b9e <pow+0x80>
    1b4e:	ff 3f       	cpi	r31, 0xFF	; 255
    1b50:	e1 05       	cpc	r30, r1
    1b52:	31 05       	cpc	r19, r1
    1b54:	21 05       	cpc	r18, r1
    1b56:	11 f1       	breq	.+68     	; 0x1b9c <pow+0x7e>
    1b58:	e8 94       	clt
    1b5a:	08 94       	sec
    1b5c:	e7 95       	ror	r30
    1b5e:	d9 01       	movw	r26, r18
    1b60:	aa 23       	and	r26, r26
    1b62:	29 f4       	brne	.+10     	; 0x1b6e <pow+0x50>
    1b64:	ab 2f       	mov	r26, r27
    1b66:	be 2f       	mov	r27, r30
    1b68:	f8 5f       	subi	r31, 0xF8	; 248
    1b6a:	d0 f3       	brcs	.-12     	; 0x1b60 <pow+0x42>
    1b6c:	10 c0       	rjmp	.+32     	; 0x1b8e <pow+0x70>
    1b6e:	ff 5f       	subi	r31, 0xFF	; 255
    1b70:	70 f4       	brcc	.+28     	; 0x1b8e <pow+0x70>
    1b72:	a6 95       	lsr	r26
    1b74:	e0 f7       	brcc	.-8      	; 0x1b6e <pow+0x50>
    1b76:	f7 39       	cpi	r31, 0x97	; 151
    1b78:	50 f0       	brcs	.+20     	; 0x1b8e <pow+0x70>
    1b7a:	19 f0       	breq	.+6      	; 0x1b82 <pow+0x64>
    1b7c:	ff 3a       	cpi	r31, 0xAF	; 175
    1b7e:	38 f4       	brcc	.+14     	; 0x1b8e <pow+0x70>
    1b80:	9f 77       	andi	r25, 0x7F	; 127
    1b82:	9f 93       	push	r25
    1b84:	0c d0       	rcall	.+24     	; 0x1b9e <pow+0x80>
    1b86:	0f 90       	pop	r0
    1b88:	07 fc       	sbrc	r0, 7
    1b8a:	90 58       	subi	r25, 0x80	; 128
    1b8c:	08 95       	ret
    1b8e:	3e f0       	brts	.+14     	; 0x1b9e <pow+0x80>
    1b90:	18 cf       	rjmp	.-464    	; 0x19c2 <__fp_nan>
    1b92:	60 e0       	ldi	r22, 0x00	; 0
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	80 e8       	ldi	r24, 0x80	; 128
    1b98:	9f e3       	ldi	r25, 0x3F	; 63
    1b9a:	08 95       	ret
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	9f 77       	andi	r25, 0x7F	; 127
    1ba0:	5f 93       	push	r21
    1ba2:	4f 93       	push	r20
    1ba4:	3f 93       	push	r19
    1ba6:	2f 93       	push	r18
    1ba8:	9e d0       	rcall	.+316    	; 0x1ce6 <log>
    1baa:	2f 91       	pop	r18
    1bac:	3f 91       	pop	r19
    1bae:	4f 91       	pop	r20
    1bb0:	5f 91       	pop	r21
    1bb2:	52 df       	rcall	.-348    	; 0x1a58 <__mulsf3>
    1bb4:	05 c0       	rjmp	.+10     	; 0x1bc0 <exp>
    1bb6:	19 f4       	brne	.+6      	; 0x1bbe <pow+0xa0>
    1bb8:	0e f0       	brts	.+2      	; 0x1bbc <pow+0x9e>
    1bba:	fd ce       	rjmp	.-518    	; 0x19b6 <__fp_inf>
    1bbc:	46 cf       	rjmp	.-372    	; 0x1a4a <__fp_zero>
    1bbe:	01 cf       	rjmp	.-510    	; 0x19c2 <__fp_nan>

00001bc0 <exp>:
    1bc0:	2a df       	rcall	.-428    	; 0x1a16 <__fp_splitA>
    1bc2:	c8 f3       	brcs	.-14     	; 0x1bb6 <pow+0x98>
    1bc4:	96 38       	cpi	r25, 0x86	; 134
    1bc6:	c0 f7       	brcc	.-16     	; 0x1bb8 <pow+0x9a>
    1bc8:	07 f8       	bld	r0, 7
    1bca:	0f 92       	push	r0
    1bcc:	e8 94       	clt
    1bce:	2b e3       	ldi	r18, 0x3B	; 59
    1bd0:	3a ea       	ldi	r19, 0xAA	; 170
    1bd2:	48 eb       	ldi	r20, 0xB8	; 184
    1bd4:	5f e7       	ldi	r21, 0x7F	; 127
    1bd6:	4e df       	rcall	.-356    	; 0x1a74 <__mulsf3_pse>
    1bd8:	0f 92       	push	r0
    1bda:	0f 92       	push	r0
    1bdc:	0f 92       	push	r0
    1bde:	4d b7       	in	r20, 0x3d	; 61
    1be0:	5e b7       	in	r21, 0x3e	; 62
    1be2:	0f 92       	push	r0
    1be4:	c0 d0       	rcall	.+384    	; 0x1d66 <modf>
    1be6:	e4 ee       	ldi	r30, 0xE4	; 228
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	16 d0       	rcall	.+44     	; 0x1c18 <__fp_powser>
    1bec:	4f 91       	pop	r20
    1bee:	5f 91       	pop	r21
    1bf0:	ef 91       	pop	r30
    1bf2:	ff 91       	pop	r31
    1bf4:	e5 95       	asr	r30
    1bf6:	ee 1f       	adc	r30, r30
    1bf8:	ff 1f       	adc	r31, r31
    1bfa:	49 f0       	breq	.+18     	; 0x1c0e <exp+0x4e>
    1bfc:	fe 57       	subi	r31, 0x7E	; 126
    1bfe:	e0 68       	ori	r30, 0x80	; 128
    1c00:	44 27       	eor	r20, r20
    1c02:	ee 0f       	add	r30, r30
    1c04:	44 1f       	adc	r20, r20
    1c06:	fa 95       	dec	r31
    1c08:	e1 f7       	brne	.-8      	; 0x1c02 <exp+0x42>
    1c0a:	41 95       	neg	r20
    1c0c:	55 0b       	sbc	r21, r21
    1c0e:	32 d0       	rcall	.+100    	; 0x1c74 <ldexp>
    1c10:	0f 90       	pop	r0
    1c12:	07 fe       	sbrs	r0, 7
    1c14:	26 c0       	rjmp	.+76     	; 0x1c62 <inverse>
    1c16:	08 95       	ret

00001c18 <__fp_powser>:
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	1f 93       	push	r17
    1c1e:	0f 93       	push	r16
    1c20:	ff 92       	push	r15
    1c22:	ef 92       	push	r14
    1c24:	df 92       	push	r13
    1c26:	7b 01       	movw	r14, r22
    1c28:	8c 01       	movw	r16, r24
    1c2a:	68 94       	set
    1c2c:	05 c0       	rjmp	.+10     	; 0x1c38 <__fp_powser+0x20>
    1c2e:	da 2e       	mov	r13, r26
    1c30:	ef 01       	movw	r28, r30
    1c32:	1e df       	rcall	.-452    	; 0x1a70 <__mulsf3x>
    1c34:	fe 01       	movw	r30, r28
    1c36:	e8 94       	clt
    1c38:	a5 91       	lpm	r26, Z+
    1c3a:	25 91       	lpm	r18, Z+
    1c3c:	35 91       	lpm	r19, Z+
    1c3e:	45 91       	lpm	r20, Z+
    1c40:	55 91       	lpm	r21, Z+
    1c42:	ae f3       	brts	.-22     	; 0x1c2e <__fp_powser+0x16>
    1c44:	ef 01       	movw	r28, r30
    1c46:	8e dd       	rcall	.-1252   	; 0x1764 <__addsf3x>
    1c48:	fe 01       	movw	r30, r28
    1c4a:	97 01       	movw	r18, r14
    1c4c:	a8 01       	movw	r20, r16
    1c4e:	da 94       	dec	r13
    1c50:	79 f7       	brne	.-34     	; 0x1c30 <__fp_powser+0x18>
    1c52:	df 90       	pop	r13
    1c54:	ef 90       	pop	r14
    1c56:	ff 90       	pop	r15
    1c58:	0f 91       	pop	r16
    1c5a:	1f 91       	pop	r17
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <inverse>:
    1c62:	9b 01       	movw	r18, r22
    1c64:	ac 01       	movw	r20, r24
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	80 e8       	ldi	r24, 0x80	; 128
    1c6c:	9f e3       	ldi	r25, 0x3F	; 63
    1c6e:	cd cd       	rjmp	.-1126   	; 0x180a <__divsf3>
    1c70:	a2 ce       	rjmp	.-700    	; 0x19b6 <__fp_inf>
    1c72:	ac c0       	rjmp	.+344    	; 0x1dcc <__fp_mpack>

00001c74 <ldexp>:
    1c74:	d0 de       	rcall	.-608    	; 0x1a16 <__fp_splitA>
    1c76:	e8 f3       	brcs	.-6      	; 0x1c72 <inverse+0x10>
    1c78:	99 23       	and	r25, r25
    1c7a:	d9 f3       	breq	.-10     	; 0x1c72 <inverse+0x10>
    1c7c:	94 0f       	add	r25, r20
    1c7e:	51 1d       	adc	r21, r1
    1c80:	bb f3       	brvs	.-18     	; 0x1c70 <inverse+0xe>
    1c82:	91 50       	subi	r25, 0x01	; 1
    1c84:	50 40       	sbci	r21, 0x00	; 0
    1c86:	94 f0       	brlt	.+36     	; 0x1cac <ldexp+0x38>
    1c88:	59 f0       	breq	.+22     	; 0x1ca0 <ldexp+0x2c>
    1c8a:	88 23       	and	r24, r24
    1c8c:	32 f0       	brmi	.+12     	; 0x1c9a <ldexp+0x26>
    1c8e:	66 0f       	add	r22, r22
    1c90:	77 1f       	adc	r23, r23
    1c92:	88 1f       	adc	r24, r24
    1c94:	91 50       	subi	r25, 0x01	; 1
    1c96:	50 40       	sbci	r21, 0x00	; 0
    1c98:	c1 f7       	brne	.-16     	; 0x1c8a <ldexp+0x16>
    1c9a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c9c:	51 05       	cpc	r21, r1
    1c9e:	44 f7       	brge	.-48     	; 0x1c70 <inverse+0xe>
    1ca0:	88 0f       	add	r24, r24
    1ca2:	91 1d       	adc	r25, r1
    1ca4:	96 95       	lsr	r25
    1ca6:	87 95       	ror	r24
    1ca8:	97 f9       	bld	r25, 7
    1caa:	08 95       	ret
    1cac:	5f 3f       	cpi	r21, 0xFF	; 255
    1cae:	ac f0       	brlt	.+42     	; 0x1cda <ldexp+0x66>
    1cb0:	98 3e       	cpi	r25, 0xE8	; 232
    1cb2:	9c f0       	brlt	.+38     	; 0x1cda <ldexp+0x66>
    1cb4:	bb 27       	eor	r27, r27
    1cb6:	86 95       	lsr	r24
    1cb8:	77 95       	ror	r23
    1cba:	67 95       	ror	r22
    1cbc:	b7 95       	ror	r27
    1cbe:	08 f4       	brcc	.+2      	; 0x1cc2 <ldexp+0x4e>
    1cc0:	b1 60       	ori	r27, 0x01	; 1
    1cc2:	93 95       	inc	r25
    1cc4:	c1 f7       	brne	.-16     	; 0x1cb6 <ldexp+0x42>
    1cc6:	bb 0f       	add	r27, r27
    1cc8:	58 f7       	brcc	.-42     	; 0x1ca0 <ldexp+0x2c>
    1cca:	11 f4       	brne	.+4      	; 0x1cd0 <ldexp+0x5c>
    1ccc:	60 ff       	sbrs	r22, 0
    1cce:	e8 cf       	rjmp	.-48     	; 0x1ca0 <ldexp+0x2c>
    1cd0:	6f 5f       	subi	r22, 0xFF	; 255
    1cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd8:	e3 cf       	rjmp	.-58     	; 0x1ca0 <ldexp+0x2c>
    1cda:	b8 ce       	rjmp	.-656    	; 0x1a4c <__fp_szero>
    1cdc:	0e f0       	brts	.+2      	; 0x1ce0 <ldexp+0x6c>
    1cde:	76 c0       	rjmp	.+236    	; 0x1dcc <__fp_mpack>
    1ce0:	70 ce       	rjmp	.-800    	; 0x19c2 <__fp_nan>
    1ce2:	68 94       	set
    1ce4:	68 ce       	rjmp	.-816    	; 0x19b6 <__fp_inf>

00001ce6 <log>:
    1ce6:	97 de       	rcall	.-722    	; 0x1a16 <__fp_splitA>
    1ce8:	c8 f3       	brcs	.-14     	; 0x1cdc <ldexp+0x68>
    1cea:	99 23       	and	r25, r25
    1cec:	d1 f3       	breq	.-12     	; 0x1ce2 <ldexp+0x6e>
    1cee:	c6 f3       	brts	.-16     	; 0x1ce0 <ldexp+0x6c>
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	1f 93       	push	r17
    1cf6:	0f 93       	push	r16
    1cf8:	ff 92       	push	r15
    1cfa:	c9 2f       	mov	r28, r25
    1cfc:	dd 27       	eor	r29, r29
    1cfe:	88 23       	and	r24, r24
    1d00:	2a f0       	brmi	.+10     	; 0x1d0c <log+0x26>
    1d02:	21 97       	sbiw	r28, 0x01	; 1
    1d04:	66 0f       	add	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	88 1f       	adc	r24, r24
    1d0a:	da f7       	brpl	.-10     	; 0x1d02 <log+0x1c>
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f eb       	ldi	r21, 0xBF	; 191
    1d14:	9f e3       	ldi	r25, 0x3F	; 63
    1d16:	88 39       	cpi	r24, 0x98	; 152
    1d18:	20 f0       	brcs	.+8      	; 0x1d22 <log+0x3c>
    1d1a:	80 3e       	cpi	r24, 0xE0	; 224
    1d1c:	30 f0       	brcs	.+12     	; 0x1d2a <log+0x44>
    1d1e:	21 96       	adiw	r28, 0x01	; 1
    1d20:	8f 77       	andi	r24, 0x7F	; 127
    1d22:	0f dd       	rcall	.-1506   	; 0x1742 <__addsf3>
    1d24:	ec e0       	ldi	r30, 0x0C	; 12
    1d26:	f1 e0       	ldi	r31, 0x01	; 1
    1d28:	03 c0       	rjmp	.+6      	; 0x1d30 <log+0x4a>
    1d2a:	0b dd       	rcall	.-1514   	; 0x1742 <__addsf3>
    1d2c:	e9 e3       	ldi	r30, 0x39	; 57
    1d2e:	f1 e0       	ldi	r31, 0x01	; 1
    1d30:	73 df       	rcall	.-282    	; 0x1c18 <__fp_powser>
    1d32:	8b 01       	movw	r16, r22
    1d34:	be 01       	movw	r22, r28
    1d36:	ec 01       	movw	r28, r24
    1d38:	fb 2e       	mov	r15, r27
    1d3a:	6f 57       	subi	r22, 0x7F	; 127
    1d3c:	71 09       	sbc	r23, r1
    1d3e:	75 95       	asr	r23
    1d40:	77 1f       	adc	r23, r23
    1d42:	88 0b       	sbc	r24, r24
    1d44:	99 0b       	sbc	r25, r25
    1d46:	fc dd       	rcall	.-1032   	; 0x1940 <__floatsisf>
    1d48:	28 e1       	ldi	r18, 0x18	; 24
    1d4a:	32 e7       	ldi	r19, 0x72	; 114
    1d4c:	41 e3       	ldi	r20, 0x31	; 49
    1d4e:	5f e3       	ldi	r21, 0x3F	; 63
    1d50:	8f de       	rcall	.-738    	; 0x1a70 <__mulsf3x>
    1d52:	af 2d       	mov	r26, r15
    1d54:	98 01       	movw	r18, r16
    1d56:	ae 01       	movw	r20, r28
    1d58:	ff 90       	pop	r15
    1d5a:	0f 91       	pop	r16
    1d5c:	1f 91       	pop	r17
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	00 dd       	rcall	.-1536   	; 0x1764 <__addsf3x>
    1d64:	3f ce       	rjmp	.-898    	; 0x19e4 <__fp_round>

00001d66 <modf>:
    1d66:	fa 01       	movw	r30, r20
    1d68:	dc 01       	movw	r26, r24
    1d6a:	aa 0f       	add	r26, r26
    1d6c:	bb 1f       	adc	r27, r27
    1d6e:	9b 01       	movw	r18, r22
    1d70:	ac 01       	movw	r20, r24
    1d72:	bf 57       	subi	r27, 0x7F	; 127
    1d74:	28 f4       	brcc	.+10     	; 0x1d80 <modf+0x1a>
    1d76:	22 27       	eor	r18, r18
    1d78:	33 27       	eor	r19, r19
    1d7a:	44 27       	eor	r20, r20
    1d7c:	50 78       	andi	r21, 0x80	; 128
    1d7e:	1f c0       	rjmp	.+62     	; 0x1dbe <modf+0x58>
    1d80:	b7 51       	subi	r27, 0x17	; 23
    1d82:	88 f4       	brcc	.+34     	; 0x1da6 <modf+0x40>
    1d84:	ab 2f       	mov	r26, r27
    1d86:	00 24       	eor	r0, r0
    1d88:	46 95       	lsr	r20
    1d8a:	37 95       	ror	r19
    1d8c:	27 95       	ror	r18
    1d8e:	01 1c       	adc	r0, r1
    1d90:	a3 95       	inc	r26
    1d92:	d2 f3       	brmi	.-12     	; 0x1d88 <modf+0x22>
    1d94:	00 20       	and	r0, r0
    1d96:	69 f0       	breq	.+26     	; 0x1db2 <modf+0x4c>
    1d98:	22 0f       	add	r18, r18
    1d9a:	33 1f       	adc	r19, r19
    1d9c:	44 1f       	adc	r20, r20
    1d9e:	b3 95       	inc	r27
    1da0:	da f3       	brmi	.-10     	; 0x1d98 <modf+0x32>
    1da2:	0d d0       	rcall	.+26     	; 0x1dbe <modf+0x58>
    1da4:	cd cc       	rjmp	.-1638   	; 0x1740 <__subsf3>
    1da6:	61 30       	cpi	r22, 0x01	; 1
    1da8:	71 05       	cpc	r23, r1
    1daa:	a0 e8       	ldi	r26, 0x80	; 128
    1dac:	8a 07       	cpc	r24, r26
    1dae:	b9 46       	sbci	r27, 0x69	; 105
    1db0:	30 f4       	brcc	.+12     	; 0x1dbe <modf+0x58>
    1db2:	9b 01       	movw	r18, r22
    1db4:	ac 01       	movw	r20, r24
    1db6:	66 27       	eor	r22, r22
    1db8:	77 27       	eor	r23, r23
    1dba:	88 27       	eor	r24, r24
    1dbc:	90 78       	andi	r25, 0x80	; 128
    1dbe:	30 96       	adiw	r30, 0x00	; 0
    1dc0:	21 f0       	breq	.+8      	; 0x1dca <modf+0x64>
    1dc2:	20 83       	st	Z, r18
    1dc4:	31 83       	std	Z+1, r19	; 0x01
    1dc6:	42 83       	std	Z+2, r20	; 0x02
    1dc8:	53 83       	std	Z+3, r21	; 0x03
    1dca:	08 95       	ret

00001dcc <__fp_mpack>:
    1dcc:	9f 3f       	cpi	r25, 0xFF	; 255
    1dce:	31 f0       	breq	.+12     	; 0x1ddc <__fp_mpack_finite+0xc>

00001dd0 <__fp_mpack_finite>:
    1dd0:	91 50       	subi	r25, 0x01	; 1
    1dd2:	20 f4       	brcc	.+8      	; 0x1ddc <__fp_mpack_finite+0xc>
    1dd4:	87 95       	ror	r24
    1dd6:	77 95       	ror	r23
    1dd8:	67 95       	ror	r22
    1dda:	b7 95       	ror	r27
    1ddc:	88 0f       	add	r24, r24
    1dde:	91 1d       	adc	r25, r1
    1de0:	96 95       	lsr	r25
    1de2:	87 95       	ror	r24
    1de4:	97 f9       	bld	r25, 7
    1de6:	08 95       	ret

00001de8 <__udivmodhi4>:
    1de8:	aa 1b       	sub	r26, r26
    1dea:	bb 1b       	sub	r27, r27
    1dec:	51 e1       	ldi	r21, 0x11	; 17
    1dee:	07 c0       	rjmp	.+14     	; 0x1dfe <__udivmodhi4_ep>

00001df0 <__udivmodhi4_loop>:
    1df0:	aa 1f       	adc	r26, r26
    1df2:	bb 1f       	adc	r27, r27
    1df4:	a6 17       	cp	r26, r22
    1df6:	b7 07       	cpc	r27, r23
    1df8:	10 f0       	brcs	.+4      	; 0x1dfe <__udivmodhi4_ep>
    1dfa:	a6 1b       	sub	r26, r22
    1dfc:	b7 0b       	sbc	r27, r23

00001dfe <__udivmodhi4_ep>:
    1dfe:	88 1f       	adc	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	5a 95       	dec	r21
    1e04:	a9 f7       	brne	.-22     	; 0x1df0 <__udivmodhi4_loop>
    1e06:	80 95       	com	r24
    1e08:	90 95       	com	r25
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	08 95       	ret

00001e10 <_exit>:
    1e10:	f8 94       	cli

00001e12 <__stop_program>:
    1e12:	ff cf       	rjmp	.-2      	; 0x1e12 <__stop_program>
